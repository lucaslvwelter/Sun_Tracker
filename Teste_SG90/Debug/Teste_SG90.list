
Teste_SG90.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c04  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08003dc8  08003dc8  00004dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ee4  08003ee4  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003ee4  08003ee4  00004ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003eec  08003eec  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003eec  08003eec  00004eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ef0  08003ef0  00004ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003ef4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  2000005c  08003f50  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000254  08003f50  00005254  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e12b  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000220e  00000000  00000000  000131b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf0  00000000  00000000  000153c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a18  00000000  00000000  000160b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002174c  00000000  00000000  00016ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000103b3  00000000  00000000  0003821c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd51b  00000000  00000000  000485cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00115aea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037b8  00000000  00000000  00115b30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  001192e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000005c 	.word	0x2000005c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003db0 	.word	0x08003db0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000060 	.word	0x20000060
 8000200:	08003db0 	.word	0x08003db0

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b08a      	sub	sp, #40	@ 0x28
 8000534:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000536:	f107 0314 	add.w	r3, r7, #20
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	605a      	str	r2, [r3, #4]
 8000540:	609a      	str	r2, [r3, #8]
 8000542:	60da      	str	r2, [r3, #12]
 8000544:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000546:	2300      	movs	r3, #0
 8000548:	613b      	str	r3, [r7, #16]
 800054a:	4b2d      	ldr	r3, [pc, #180]	@ (8000600 <MX_GPIO_Init+0xd0>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054e:	4a2c      	ldr	r2, [pc, #176]	@ (8000600 <MX_GPIO_Init+0xd0>)
 8000550:	f043 0304 	orr.w	r3, r3, #4
 8000554:	6313      	str	r3, [r2, #48]	@ 0x30
 8000556:	4b2a      	ldr	r3, [pc, #168]	@ (8000600 <MX_GPIO_Init+0xd0>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055a:	f003 0304 	and.w	r3, r3, #4
 800055e:	613b      	str	r3, [r7, #16]
 8000560:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000562:	2300      	movs	r3, #0
 8000564:	60fb      	str	r3, [r7, #12]
 8000566:	4b26      	ldr	r3, [pc, #152]	@ (8000600 <MX_GPIO_Init+0xd0>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056a:	4a25      	ldr	r2, [pc, #148]	@ (8000600 <MX_GPIO_Init+0xd0>)
 800056c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000570:	6313      	str	r3, [r2, #48]	@ 0x30
 8000572:	4b23      	ldr	r3, [pc, #140]	@ (8000600 <MX_GPIO_Init+0xd0>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000576:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800057a:	60fb      	str	r3, [r7, #12]
 800057c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800057e:	2300      	movs	r3, #0
 8000580:	60bb      	str	r3, [r7, #8]
 8000582:	4b1f      	ldr	r3, [pc, #124]	@ (8000600 <MX_GPIO_Init+0xd0>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000586:	4a1e      	ldr	r2, [pc, #120]	@ (8000600 <MX_GPIO_Init+0xd0>)
 8000588:	f043 0301 	orr.w	r3, r3, #1
 800058c:	6313      	str	r3, [r2, #48]	@ 0x30
 800058e:	4b1c      	ldr	r3, [pc, #112]	@ (8000600 <MX_GPIO_Init+0xd0>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	60bb      	str	r3, [r7, #8]
 8000598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	4b18      	ldr	r3, [pc, #96]	@ (8000600 <MX_GPIO_Init+0xd0>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a2:	4a17      	ldr	r2, [pc, #92]	@ (8000600 <MX_GPIO_Init+0xd0>)
 80005a4:	f043 0302 	orr.w	r3, r3, #2
 80005a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005aa:	4b15      	ldr	r3, [pc, #84]	@ (8000600 <MX_GPIO_Init+0xd0>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ae:	f003 0302 	and.w	r3, r3, #2
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2120      	movs	r1, #32
 80005ba:	4812      	ldr	r0, [pc, #72]	@ (8000604 <MX_GPIO_Init+0xd4>)
 80005bc:	f000 fed6 	bl	800136c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005c6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80005ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005cc:	2300      	movs	r3, #0
 80005ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005d0:	f107 0314 	add.w	r3, r7, #20
 80005d4:	4619      	mov	r1, r3
 80005d6:	480c      	ldr	r0, [pc, #48]	@ (8000608 <MX_GPIO_Init+0xd8>)
 80005d8:	f000 fd34 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005dc:	2320      	movs	r3, #32
 80005de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e0:	2301      	movs	r3, #1
 80005e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e4:	2300      	movs	r3, #0
 80005e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e8:	2300      	movs	r3, #0
 80005ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005ec:	f107 0314 	add.w	r3, r7, #20
 80005f0:	4619      	mov	r1, r3
 80005f2:	4804      	ldr	r0, [pc, #16]	@ (8000604 <MX_GPIO_Init+0xd4>)
 80005f4:	f000 fd26 	bl	8001044 <HAL_GPIO_Init>

}
 80005f8:	bf00      	nop
 80005fa:	3728      	adds	r7, #40	@ 0x28
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40023800 	.word	0x40023800
 8000604:	40020000 	.word	0x40020000
 8000608:	40020800 	.word	0x40020800

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000610:	f000 fb02 	bl	8000c18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000614:	f000 f81c 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000618:	f7ff ff8a 	bl	8000530 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800061c:	f000 fa58 	bl	8000ad0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000620:	f000 f958 	bl	80008d4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000624:	2100      	movs	r1, #0
 8000626:	4807      	ldr	r0, [pc, #28]	@ (8000644 <main+0x38>)
 8000628:	f001 fd4a 	bl	80020c0 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart2, recebido, 3);
 800062c:	2203      	movs	r2, #3
 800062e:	4906      	ldr	r1, [pc, #24]	@ (8000648 <main+0x3c>)
 8000630:	4806      	ldr	r0, [pc, #24]	@ (800064c <main+0x40>)
 8000632:	f002 fbcb 	bl	8002dcc <HAL_UART_Receive_IT>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 500);
 8000636:	4b03      	ldr	r3, [pc, #12]	@ (8000644 <main+0x38>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800063e:	635a      	str	r2, [r3, #52]	@ 0x34
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000640:	bf00      	nop
 8000642:	e7fd      	b.n	8000640 <main+0x34>
 8000644:	20000088 	.word	0x20000088
 8000648:	20000078 	.word	0x20000078
 800064c:	200000d0 	.word	0x200000d0

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b094      	sub	sp, #80	@ 0x50
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 031c 	add.w	r3, r7, #28
 800065a:	2234      	movs	r2, #52	@ 0x34
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f003 fb74 	bl	8003d4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 0308 	add.w	r3, r7, #8
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000674:	2300      	movs	r3, #0
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	4b2a      	ldr	r3, [pc, #168]	@ (8000724 <SystemClock_Config+0xd4>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800067c:	4a29      	ldr	r2, [pc, #164]	@ (8000724 <SystemClock_Config+0xd4>)
 800067e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000682:	6413      	str	r3, [r2, #64]	@ 0x40
 8000684:	4b27      	ldr	r3, [pc, #156]	@ (8000724 <SystemClock_Config+0xd4>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000688:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000690:	2300      	movs	r3, #0
 8000692:	603b      	str	r3, [r7, #0]
 8000694:	4b24      	ldr	r3, [pc, #144]	@ (8000728 <SystemClock_Config+0xd8>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800069c:	4a22      	ldr	r2, [pc, #136]	@ (8000728 <SystemClock_Config+0xd8>)
 800069e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006a2:	6013      	str	r3, [r2, #0]
 80006a4:	4b20      	ldr	r3, [pc, #128]	@ (8000728 <SystemClock_Config+0xd8>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006ac:	603b      	str	r3, [r7, #0]
 80006ae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b0:	2302      	movs	r3, #2
 80006b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b4:	2301      	movs	r3, #1
 80006b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b8:	2310      	movs	r3, #16
 80006ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006bc:	2302      	movs	r3, #2
 80006be:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c0:	2300      	movs	r3, #0
 80006c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006c4:	2310      	movs	r3, #16
 80006c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006c8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006cc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006ce:	2304      	movs	r3, #4
 80006d0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006d2:	2302      	movs	r3, #2
 80006d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006d6:	2302      	movs	r3, #2
 80006d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006da:	f107 031c 	add.w	r3, r7, #28
 80006de:	4618      	mov	r0, r3
 80006e0:	f001 f9a8 	bl	8001a34 <HAL_RCC_OscConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006ea:	f000 f879 	bl	80007e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ee:	230f      	movs	r3, #15
 80006f0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f2:	2302      	movs	r3, #2
 80006f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000704:	f107 0308 	add.w	r3, r7, #8
 8000708:	2102      	movs	r1, #2
 800070a:	4618      	mov	r0, r3
 800070c:	f000 fe48 	bl	80013a0 <HAL_RCC_ClockConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000716:	f000 f863 	bl	80007e0 <Error_Handler>
  }
}
 800071a:	bf00      	nop
 800071c:	3750      	adds	r7, #80	@ 0x50
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40023800 	.word	0x40023800
 8000728:	40007000 	.word	0x40007000

0800072c <map>:

/* USER CODE BEGIN 4 */
int map(int x, int in_min, int in_max, int out_min, int out_max)
{
 800072c:	b480      	push	{r7}
 800072e:	b085      	sub	sp, #20
 8000730:	af00      	add	r7, sp, #0
 8000732:	60f8      	str	r0, [r7, #12]
 8000734:	60b9      	str	r1, [r7, #8]
 8000736:	607a      	str	r2, [r7, #4]
 8000738:	603b      	str	r3, [r7, #0]
	return ((x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min);
 800073a:	68fa      	ldr	r2, [r7, #12]
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	1ad3      	subs	r3, r2, r3
 8000740:	69b9      	ldr	r1, [r7, #24]
 8000742:	683a      	ldr	r2, [r7, #0]
 8000744:	1a8a      	subs	r2, r1, r2
 8000746:	fb03 f202 	mul.w	r2, r3, r2
 800074a:	6879      	ldr	r1, [r7, #4]
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	1acb      	subs	r3, r1, r3
 8000750:	fb92 f2f3 	sdiv	r2, r2, r3
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	4413      	add	r3, r2
}
 8000758:	4618      	mov	r0, r3
 800075a:	3714      	adds	r7, #20
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr

08000764 <servo_Write>:

void servo_Write(int angulo)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af02      	add	r7, sp, #8
 800076a:	6078      	str	r0, [r7, #4]
	if(angulo < 0 || angulo > 180) angulo = 90; // posição "segura" caso o ângulo seja inválido
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2b00      	cmp	r3, #0
 8000770:	db02      	blt.n	8000778 <servo_Write+0x14>
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	2bb4      	cmp	r3, #180	@ 0xb4
 8000776:	dd01      	ble.n	800077c <servo_Write+0x18>
 8000778:	235a      	movs	r3, #90	@ 0x5a
 800077a:	607b      	str	r3, [r7, #4]

	angulo = map(angulo, 0, 180, 500, 1000); // normaliza o valor para uma faixa de 500 a 1000
 800077c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000780:	9300      	str	r3, [sp, #0]
 8000782:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000786:	22b4      	movs	r2, #180	@ 0xb4
 8000788:	2100      	movs	r1, #0
 800078a:	6878      	ldr	r0, [r7, #4]
 800078c:	f7ff ffce 	bl	800072c <map>
 8000790:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, angulo);
 8000792:	4b04      	ldr	r3, [pc, #16]	@ (80007a4 <servo_Write+0x40>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	687a      	ldr	r2, [r7, #4]
 8000798:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000088 	.word	0x20000088

080007a8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	recebido[3] = '\0'; // necessário para usar a função atoi
 80007b0:	4b09      	ldr	r3, [pc, #36]	@ (80007d8 <HAL_UART_RxCpltCallback+0x30>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
	int valor = atoi(recebido); // converte o char para int
 80007b6:	4808      	ldr	r0, [pc, #32]	@ (80007d8 <HAL_UART_RxCpltCallback+0x30>)
 80007b8:	f003 fa40 	bl	8003c3c <atoi>
 80007bc:	60f8      	str	r0, [r7, #12]

	servo_Write(valor); // atualiza a posição do servo
 80007be:	68f8      	ldr	r0, [r7, #12]
 80007c0:	f7ff ffd0 	bl	8000764 <servo_Write>
	HAL_UART_Receive_IT(&huart2, recebido, 3);
 80007c4:	2203      	movs	r2, #3
 80007c6:	4904      	ldr	r1, [pc, #16]	@ (80007d8 <HAL_UART_RxCpltCallback+0x30>)
 80007c8:	4804      	ldr	r0, [pc, #16]	@ (80007dc <HAL_UART_RxCpltCallback+0x34>)
 80007ca:	f002 faff 	bl	8002dcc <HAL_UART_Receive_IT>
}
 80007ce:	bf00      	nop
 80007d0:	3710      	adds	r7, #16
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000078 	.word	0x20000078
 80007dc:	200000d0 	.word	0x200000d0

080007e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e4:	b672      	cpsid	i
}
 80007e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e8:	bf00      	nop
 80007ea:	e7fd      	b.n	80007e8 <Error_Handler+0x8>

080007ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	4b10      	ldr	r3, [pc, #64]	@ (8000838 <HAL_MspInit+0x4c>)
 80007f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007fa:	4a0f      	ldr	r2, [pc, #60]	@ (8000838 <HAL_MspInit+0x4c>)
 80007fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000800:	6453      	str	r3, [r2, #68]	@ 0x44
 8000802:	4b0d      	ldr	r3, [pc, #52]	@ (8000838 <HAL_MspInit+0x4c>)
 8000804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000806:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	603b      	str	r3, [r7, #0]
 8000812:	4b09      	ldr	r3, [pc, #36]	@ (8000838 <HAL_MspInit+0x4c>)
 8000814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000816:	4a08      	ldr	r2, [pc, #32]	@ (8000838 <HAL_MspInit+0x4c>)
 8000818:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800081c:	6413      	str	r3, [r2, #64]	@ 0x40
 800081e:	4b06      	ldr	r3, [pc, #24]	@ (8000838 <HAL_MspInit+0x4c>)
 8000820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000822:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000826:	603b      	str	r3, [r7, #0]
 8000828:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800082a:	2007      	movs	r0, #7
 800082c:	f000 fb36 	bl	8000e9c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000830:	bf00      	nop
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40023800 	.word	0x40023800

0800083c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000840:	bf00      	nop
 8000842:	e7fd      	b.n	8000840 <NMI_Handler+0x4>

08000844 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000848:	bf00      	nop
 800084a:	e7fd      	b.n	8000848 <HardFault_Handler+0x4>

0800084c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000850:	bf00      	nop
 8000852:	e7fd      	b.n	8000850 <MemManage_Handler+0x4>

08000854 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000858:	bf00      	nop
 800085a:	e7fd      	b.n	8000858 <BusFault_Handler+0x4>

0800085c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000860:	bf00      	nop
 8000862:	e7fd      	b.n	8000860 <UsageFault_Handler+0x4>

08000864 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr

08000872 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr

0800088e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000892:	f000 fa13 	bl	8000cbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
	...

0800089c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80008a0:	4802      	ldr	r0, [pc, #8]	@ (80008ac <USART2_IRQHandler+0x10>)
 80008a2:	f002 fab9 	bl	8002e18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	200000d0 	.word	0x200000d0

080008b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008b4:	4b06      	ldr	r3, [pc, #24]	@ (80008d0 <SystemInit+0x20>)
 80008b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008ba:	4a05      	ldr	r2, [pc, #20]	@ (80008d0 <SystemInit+0x20>)
 80008bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	e000ed00 	.word	0xe000ed00

080008d4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b096      	sub	sp, #88	@ 0x58
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008da:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]
 80008e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
 8000900:	611a      	str	r2, [r3, #16]
 8000902:	615a      	str	r2, [r3, #20]
 8000904:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000906:	1d3b      	adds	r3, r7, #4
 8000908:	2220      	movs	r2, #32
 800090a:	2100      	movs	r1, #0
 800090c:	4618      	mov	r0, r3
 800090e:	f003 fa1d 	bl	8003d4c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000912:	4b3f      	ldr	r3, [pc, #252]	@ (8000a10 <MX_TIM1_Init+0x13c>)
 8000914:	4a3f      	ldr	r2, [pc, #252]	@ (8000a14 <MX_TIM1_Init+0x140>)
 8000916:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = (168 - 1);
 8000918:	4b3d      	ldr	r3, [pc, #244]	@ (8000a10 <MX_TIM1_Init+0x13c>)
 800091a:	22a7      	movs	r2, #167	@ 0xa7
 800091c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800091e:	4b3c      	ldr	r3, [pc, #240]	@ (8000a10 <MX_TIM1_Init+0x13c>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = (10000 - 1);
 8000924:	4b3a      	ldr	r3, [pc, #232]	@ (8000a10 <MX_TIM1_Init+0x13c>)
 8000926:	f242 720f 	movw	r2, #9999	@ 0x270f
 800092a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800092c:	4b38      	ldr	r3, [pc, #224]	@ (8000a10 <MX_TIM1_Init+0x13c>)
 800092e:	2200      	movs	r2, #0
 8000930:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000932:	4b37      	ldr	r3, [pc, #220]	@ (8000a10 <MX_TIM1_Init+0x13c>)
 8000934:	2200      	movs	r2, #0
 8000936:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000938:	4b35      	ldr	r3, [pc, #212]	@ (8000a10 <MX_TIM1_Init+0x13c>)
 800093a:	2280      	movs	r2, #128	@ 0x80
 800093c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800093e:	4834      	ldr	r0, [pc, #208]	@ (8000a10 <MX_TIM1_Init+0x13c>)
 8000940:	f001 fb16 	bl	8001f70 <HAL_TIM_Base_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800094a:	f7ff ff49 	bl	80007e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800094e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000952:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000954:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000958:	4619      	mov	r1, r3
 800095a:	482d      	ldr	r0, [pc, #180]	@ (8000a10 <MX_TIM1_Init+0x13c>)
 800095c:	f001 fd3a 	bl	80023d4 <HAL_TIM_ConfigClockSource>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000966:	f7ff ff3b 	bl	80007e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800096a:	4829      	ldr	r0, [pc, #164]	@ (8000a10 <MX_TIM1_Init+0x13c>)
 800096c:	f001 fb4f 	bl	800200e <HAL_TIM_PWM_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000976:	f7ff ff33 	bl	80007e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800097a:	2300      	movs	r3, #0
 800097c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800097e:	2300      	movs	r3, #0
 8000980:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000982:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000986:	4619      	mov	r1, r3
 8000988:	4821      	ldr	r0, [pc, #132]	@ (8000a10 <MX_TIM1_Init+0x13c>)
 800098a:	f002 f901 	bl	8002b90 <HAL_TIMEx_MasterConfigSynchronization>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000994:	f7ff ff24 	bl	80007e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000998:	2360      	movs	r3, #96	@ 0x60
 800099a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 5000;
 800099c:	f241 3388 	movw	r3, #5000	@ 0x1388
 80009a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009a6:	2300      	movs	r3, #0
 80009a8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009aa:	2300      	movs	r3, #0
 80009ac:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009ae:	2300      	movs	r3, #0
 80009b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009b2:	2300      	movs	r3, #0
 80009b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009ba:	2200      	movs	r2, #0
 80009bc:	4619      	mov	r1, r3
 80009be:	4814      	ldr	r0, [pc, #80]	@ (8000a10 <MX_TIM1_Init+0x13c>)
 80009c0:	f001 fc46 	bl	8002250 <HAL_TIM_PWM_ConfigChannel>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80009ca:	f7ff ff09 	bl	80007e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009ce:	2300      	movs	r3, #0
 80009d0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009d2:	2300      	movs	r3, #0
 80009d4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009d6:	2300      	movs	r3, #0
 80009d8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009de:	2300      	movs	r3, #0
 80009e0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009e6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009e8:	2300      	movs	r3, #0
 80009ea:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009ec:	1d3b      	adds	r3, r7, #4
 80009ee:	4619      	mov	r1, r3
 80009f0:	4807      	ldr	r0, [pc, #28]	@ (8000a10 <MX_TIM1_Init+0x13c>)
 80009f2:	f002 f949 	bl	8002c88 <HAL_TIMEx_ConfigBreakDeadTime>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80009fc:	f7ff fef0 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a00:	4803      	ldr	r0, [pc, #12]	@ (8000a10 <MX_TIM1_Init+0x13c>)
 8000a02:	f000 f82b 	bl	8000a5c <HAL_TIM_MspPostInit>

}
 8000a06:	bf00      	nop
 8000a08:	3758      	adds	r7, #88	@ 0x58
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000088 	.word	0x20000088
 8000a14:	40010000 	.word	0x40010000

08000a18 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a0b      	ldr	r2, [pc, #44]	@ (8000a54 <HAL_TIM_Base_MspInit+0x3c>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d10d      	bne.n	8000a46 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a58 <HAL_TIM_Base_MspInit+0x40>)
 8000a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a32:	4a09      	ldr	r2, [pc, #36]	@ (8000a58 <HAL_TIM_Base_MspInit+0x40>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a3a:	4b07      	ldr	r3, [pc, #28]	@ (8000a58 <HAL_TIM_Base_MspInit+0x40>)
 8000a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000a46:	bf00      	nop
 8000a48:	3714      	adds	r7, #20
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	40010000 	.word	0x40010000
 8000a58:	40023800 	.word	0x40023800

08000a5c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b088      	sub	sp, #32
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	f107 030c 	add.w	r3, r7, #12
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a12      	ldr	r2, [pc, #72]	@ (8000ac4 <HAL_TIM_MspPostInit+0x68>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d11e      	bne.n	8000abc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	4b11      	ldr	r3, [pc, #68]	@ (8000ac8 <HAL_TIM_MspPostInit+0x6c>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a86:	4a10      	ldr	r2, [pc, #64]	@ (8000ac8 <HAL_TIM_MspPostInit+0x6c>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac8 <HAL_TIM_MspPostInit+0x6c>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a9a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a9e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000aac:	2301      	movs	r3, #1
 8000aae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab0:	f107 030c 	add.w	r3, r7, #12
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4805      	ldr	r0, [pc, #20]	@ (8000acc <HAL_TIM_MspPostInit+0x70>)
 8000ab8:	f000 fac4 	bl	8001044 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000abc:	bf00      	nop
 8000abe:	3720      	adds	r7, #32
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40010000 	.word	0x40010000
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	40020000 	.word	0x40020000

08000ad0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ad4:	4b11      	ldr	r3, [pc, #68]	@ (8000b1c <MX_USART2_UART_Init+0x4c>)
 8000ad6:	4a12      	ldr	r2, [pc, #72]	@ (8000b20 <MX_USART2_UART_Init+0x50>)
 8000ad8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ada:	4b10      	ldr	r3, [pc, #64]	@ (8000b1c <MX_USART2_UART_Init+0x4c>)
 8000adc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ae0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b1c <MX_USART2_UART_Init+0x4c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b1c <MX_USART2_UART_Init+0x4c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aee:	4b0b      	ldr	r3, [pc, #44]	@ (8000b1c <MX_USART2_UART_Init+0x4c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000af4:	4b09      	ldr	r3, [pc, #36]	@ (8000b1c <MX_USART2_UART_Init+0x4c>)
 8000af6:	220c      	movs	r2, #12
 8000af8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000afa:	4b08      	ldr	r3, [pc, #32]	@ (8000b1c <MX_USART2_UART_Init+0x4c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b00:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <MX_USART2_UART_Init+0x4c>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b06:	4805      	ldr	r0, [pc, #20]	@ (8000b1c <MX_USART2_UART_Init+0x4c>)
 8000b08:	f002 f910 	bl	8002d2c <HAL_UART_Init>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b12:	f7ff fe65 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	200000d0 	.word	0x200000d0
 8000b20:	40004400 	.word	0x40004400

08000b24 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08a      	sub	sp, #40	@ 0x28
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a1d      	ldr	r2, [pc, #116]	@ (8000bb8 <HAL_UART_MspInit+0x94>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d133      	bne.n	8000bae <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	613b      	str	r3, [r7, #16]
 8000b4a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bbc <HAL_UART_MspInit+0x98>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b4e:	4a1b      	ldr	r2, [pc, #108]	@ (8000bbc <HAL_UART_MspInit+0x98>)
 8000b50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b56:	4b19      	ldr	r3, [pc, #100]	@ (8000bbc <HAL_UART_MspInit+0x98>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b5e:	613b      	str	r3, [r7, #16]
 8000b60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	4b15      	ldr	r3, [pc, #84]	@ (8000bbc <HAL_UART_MspInit+0x98>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6a:	4a14      	ldr	r2, [pc, #80]	@ (8000bbc <HAL_UART_MspInit+0x98>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b72:	4b12      	ldr	r3, [pc, #72]	@ (8000bbc <HAL_UART_MspInit+0x98>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b7e:	230c      	movs	r3, #12
 8000b80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	2302      	movs	r3, #2
 8000b84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b8e:	2307      	movs	r3, #7
 8000b90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	4619      	mov	r1, r3
 8000b98:	4809      	ldr	r0, [pc, #36]	@ (8000bc0 <HAL_UART_MspInit+0x9c>)
 8000b9a:	f000 fa53 	bl	8001044 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	2026      	movs	r0, #38	@ 0x26
 8000ba4:	f000 f985 	bl	8000eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ba8:	2026      	movs	r0, #38	@ 0x26
 8000baa:	f000 f99e 	bl	8000eea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000bae:	bf00      	nop
 8000bb0:	3728      	adds	r7, #40	@ 0x28
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40004400 	.word	0x40004400
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	40020000 	.word	0x40020000

08000bc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bc4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bfc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000bc8:	f7ff fe72 	bl	80008b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bcc:	480c      	ldr	r0, [pc, #48]	@ (8000c00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bce:	490d      	ldr	r1, [pc, #52]	@ (8000c04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bd0:	4a0d      	ldr	r2, [pc, #52]	@ (8000c08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd4:	e002      	b.n	8000bdc <LoopCopyDataInit>

08000bd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bda:	3304      	adds	r3, #4

08000bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be0:	d3f9      	bcc.n	8000bd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000be2:	4a0a      	ldr	r2, [pc, #40]	@ (8000c0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000be4:	4c0a      	ldr	r4, [pc, #40]	@ (8000c10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000be6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be8:	e001      	b.n	8000bee <LoopFillZerobss>

08000bea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bec:	3204      	adds	r2, #4

08000bee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf0:	d3fb      	bcc.n	8000bea <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000bf2:	f003 f8b9 	bl	8003d68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bf6:	f7ff fd09 	bl	800060c <main>
  bx  lr    
 8000bfa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bfc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c04:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c08:	08003ef4 	.word	0x08003ef4
  ldr r2, =_sbss
 8000c0c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c10:	20000254 	.word	0x20000254

08000c14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c14:	e7fe      	b.n	8000c14 <ADC_IRQHandler>
	...

08000c18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c58 <HAL_Init+0x40>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a0d      	ldr	r2, [pc, #52]	@ (8000c58 <HAL_Init+0x40>)
 8000c22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c28:	4b0b      	ldr	r3, [pc, #44]	@ (8000c58 <HAL_Init+0x40>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a0a      	ldr	r2, [pc, #40]	@ (8000c58 <HAL_Init+0x40>)
 8000c2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c34:	4b08      	ldr	r3, [pc, #32]	@ (8000c58 <HAL_Init+0x40>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a07      	ldr	r2, [pc, #28]	@ (8000c58 <HAL_Init+0x40>)
 8000c3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c40:	2003      	movs	r0, #3
 8000c42:	f000 f92b 	bl	8000e9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c46:	2000      	movs	r0, #0
 8000c48:	f000 f808 	bl	8000c5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c4c:	f7ff fdce 	bl	80007ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40023c00 	.word	0x40023c00

08000c5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c64:	4b12      	ldr	r3, [pc, #72]	@ (8000cb0 <HAL_InitTick+0x54>)
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	4b12      	ldr	r3, [pc, #72]	@ (8000cb4 <HAL_InitTick+0x58>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f000 f943 	bl	8000f06 <HAL_SYSTICK_Config>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	e00e      	b.n	8000ca8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2b0f      	cmp	r3, #15
 8000c8e:	d80a      	bhi.n	8000ca6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c90:	2200      	movs	r2, #0
 8000c92:	6879      	ldr	r1, [r7, #4]
 8000c94:	f04f 30ff 	mov.w	r0, #4294967295
 8000c98:	f000 f90b 	bl	8000eb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c9c:	4a06      	ldr	r2, [pc, #24]	@ (8000cb8 <HAL_InitTick+0x5c>)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e000      	b.n	8000ca8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20000000 	.word	0x20000000
 8000cb4:	20000008 	.word	0x20000008
 8000cb8:	20000004 	.word	0x20000004

08000cbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc0:	4b06      	ldr	r3, [pc, #24]	@ (8000cdc <HAL_IncTick+0x20>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	4b06      	ldr	r3, [pc, #24]	@ (8000ce0 <HAL_IncTick+0x24>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4413      	add	r3, r2
 8000ccc:	4a04      	ldr	r2, [pc, #16]	@ (8000ce0 <HAL_IncTick+0x24>)
 8000cce:	6013      	str	r3, [r2, #0]
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	20000008 	.word	0x20000008
 8000ce0:	20000118 	.word	0x20000118

08000ce4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce8:	4b03      	ldr	r3, [pc, #12]	@ (8000cf8 <HAL_GetTick+0x14>)
 8000cea:	681b      	ldr	r3, [r3, #0]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	20000118 	.word	0x20000118

08000cfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f003 0307 	and.w	r3, r3, #7
 8000d0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d40 <__NVIC_SetPriorityGrouping+0x44>)
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d12:	68ba      	ldr	r2, [r7, #8]
 8000d14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d18:	4013      	ands	r3, r2
 8000d1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d2e:	4a04      	ldr	r2, [pc, #16]	@ (8000d40 <__NVIC_SetPriorityGrouping+0x44>)
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	60d3      	str	r3, [r2, #12]
}
 8000d34:	bf00      	nop
 8000d36:	3714      	adds	r7, #20
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d48:	4b04      	ldr	r3, [pc, #16]	@ (8000d5c <__NVIC_GetPriorityGrouping+0x18>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	0a1b      	lsrs	r3, r3, #8
 8000d4e:	f003 0307 	and.w	r3, r3, #7
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	db0b      	blt.n	8000d8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	f003 021f 	and.w	r2, r3, #31
 8000d78:	4907      	ldr	r1, [pc, #28]	@ (8000d98 <__NVIC_EnableIRQ+0x38>)
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	095b      	lsrs	r3, r3, #5
 8000d80:	2001      	movs	r0, #1
 8000d82:	fa00 f202 	lsl.w	r2, r0, r2
 8000d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d8a:	bf00      	nop
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	e000e100 	.word	0xe000e100

08000d9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	6039      	str	r1, [r7, #0]
 8000da6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	db0a      	blt.n	8000dc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	b2da      	uxtb	r2, r3
 8000db4:	490c      	ldr	r1, [pc, #48]	@ (8000de8 <__NVIC_SetPriority+0x4c>)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	0112      	lsls	r2, r2, #4
 8000dbc:	b2d2      	uxtb	r2, r2
 8000dbe:	440b      	add	r3, r1
 8000dc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dc4:	e00a      	b.n	8000ddc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	b2da      	uxtb	r2, r3
 8000dca:	4908      	ldr	r1, [pc, #32]	@ (8000dec <__NVIC_SetPriority+0x50>)
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	f003 030f 	and.w	r3, r3, #15
 8000dd2:	3b04      	subs	r3, #4
 8000dd4:	0112      	lsls	r2, r2, #4
 8000dd6:	b2d2      	uxtb	r2, r2
 8000dd8:	440b      	add	r3, r1
 8000dda:	761a      	strb	r2, [r3, #24]
}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	e000e100 	.word	0xe000e100
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b089      	sub	sp, #36	@ 0x24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	f003 0307 	and.w	r3, r3, #7
 8000e02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	f1c3 0307 	rsb	r3, r3, #7
 8000e0a:	2b04      	cmp	r3, #4
 8000e0c:	bf28      	it	cs
 8000e0e:	2304      	movcs	r3, #4
 8000e10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	3304      	adds	r3, #4
 8000e16:	2b06      	cmp	r3, #6
 8000e18:	d902      	bls.n	8000e20 <NVIC_EncodePriority+0x30>
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	3b03      	subs	r3, #3
 8000e1e:	e000      	b.n	8000e22 <NVIC_EncodePriority+0x32>
 8000e20:	2300      	movs	r3, #0
 8000e22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e24:	f04f 32ff 	mov.w	r2, #4294967295
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	43da      	mvns	r2, r3
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	401a      	ands	r2, r3
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e38:	f04f 31ff 	mov.w	r1, #4294967295
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e42:	43d9      	mvns	r1, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e48:	4313      	orrs	r3, r2
         );
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3724      	adds	r7, #36	@ 0x24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
	...

08000e58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3b01      	subs	r3, #1
 8000e64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e68:	d301      	bcc.n	8000e6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e00f      	b.n	8000e8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e98 <SysTick_Config+0x40>)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3b01      	subs	r3, #1
 8000e74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e76:	210f      	movs	r1, #15
 8000e78:	f04f 30ff 	mov.w	r0, #4294967295
 8000e7c:	f7ff ff8e 	bl	8000d9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e80:	4b05      	ldr	r3, [pc, #20]	@ (8000e98 <SysTick_Config+0x40>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e86:	4b04      	ldr	r3, [pc, #16]	@ (8000e98 <SysTick_Config+0x40>)
 8000e88:	2207      	movs	r2, #7
 8000e8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	e000e010 	.word	0xe000e010

08000e9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff ff29 	bl	8000cfc <__NVIC_SetPriorityGrouping>
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b086      	sub	sp, #24
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	4603      	mov	r3, r0
 8000eba:	60b9      	str	r1, [r7, #8]
 8000ebc:	607a      	str	r2, [r7, #4]
 8000ebe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec4:	f7ff ff3e 	bl	8000d44 <__NVIC_GetPriorityGrouping>
 8000ec8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	68b9      	ldr	r1, [r7, #8]
 8000ece:	6978      	ldr	r0, [r7, #20]
 8000ed0:	f7ff ff8e 	bl	8000df0 <NVIC_EncodePriority>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eda:	4611      	mov	r1, r2
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff ff5d 	bl	8000d9c <__NVIC_SetPriority>
}
 8000ee2:	bf00      	nop
 8000ee4:	3718      	adds	r7, #24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff ff31 	bl	8000d60 <__NVIC_EnableIRQ>
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff ffa2 	bl	8000e58 <SysTick_Config>
 8000f14:	4603      	mov	r3, r0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b084      	sub	sp, #16
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f2a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f2c:	f7ff feda 	bl	8000ce4 <HAL_GetTick>
 8000f30:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	2b02      	cmp	r3, #2
 8000f3c:	d008      	beq.n	8000f50 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2280      	movs	r2, #128	@ 0x80
 8000f42:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2200      	movs	r2, #0
 8000f48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e052      	b.n	8000ff6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f022 0216 	bic.w	r2, r2, #22
 8000f5e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	695a      	ldr	r2, [r3, #20]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000f6e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d103      	bne.n	8000f80 <HAL_DMA_Abort+0x62>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d007      	beq.n	8000f90 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f022 0208 	bic.w	r2, r2, #8
 8000f8e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f022 0201 	bic.w	r2, r2, #1
 8000f9e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fa0:	e013      	b.n	8000fca <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000fa2:	f7ff fe9f 	bl	8000ce4 <HAL_GetTick>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	2b05      	cmp	r3, #5
 8000fae:	d90c      	bls.n	8000fca <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2220      	movs	r2, #32
 8000fb4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2203      	movs	r2, #3
 8000fba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	e015      	b.n	8000ff6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f003 0301 	and.w	r3, r3, #1
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d1e4      	bne.n	8000fa2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000fdc:	223f      	movs	r2, #63	@ 0x3f
 8000fde:	409a      	lsls	r2, r3
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ffe:	b480      	push	{r7}
 8001000:	b083      	sub	sp, #12
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800100c:	b2db      	uxtb	r3, r3
 800100e:	2b02      	cmp	r3, #2
 8001010:	d004      	beq.n	800101c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2280      	movs	r2, #128	@ 0x80
 8001016:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	e00c      	b.n	8001036 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2205      	movs	r2, #5
 8001020:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f022 0201 	bic.w	r2, r2, #1
 8001032:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
	...

08001044 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001044:	b480      	push	{r7}
 8001046:	b089      	sub	sp, #36	@ 0x24
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001052:	2300      	movs	r3, #0
 8001054:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001056:	2300      	movs	r3, #0
 8001058:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800105a:	2300      	movs	r3, #0
 800105c:	61fb      	str	r3, [r7, #28]
 800105e:	e165      	b.n	800132c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001060:	2201      	movs	r2, #1
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	697a      	ldr	r2, [r7, #20]
 8001070:	4013      	ands	r3, r2
 8001072:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	429a      	cmp	r2, r3
 800107a:	f040 8154 	bne.w	8001326 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f003 0303 	and.w	r3, r3, #3
 8001086:	2b01      	cmp	r3, #1
 8001088:	d005      	beq.n	8001096 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001092:	2b02      	cmp	r3, #2
 8001094:	d130      	bne.n	80010f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	2203      	movs	r2, #3
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43db      	mvns	r3, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4013      	ands	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	68da      	ldr	r2, [r3, #12]
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4313      	orrs	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010cc:	2201      	movs	r2, #1
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4013      	ands	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	091b      	lsrs	r3, r3, #4
 80010e2:	f003 0201 	and.w	r2, r3, #1
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 0303 	and.w	r3, r3, #3
 8001100:	2b03      	cmp	r3, #3
 8001102:	d017      	beq.n	8001134 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	2203      	movs	r2, #3
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	689a      	ldr	r2, [r3, #8]
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 0303 	and.w	r3, r3, #3
 800113c:	2b02      	cmp	r3, #2
 800113e:	d123      	bne.n	8001188 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	08da      	lsrs	r2, r3, #3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3208      	adds	r2, #8
 8001148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800114c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	f003 0307 	and.w	r3, r3, #7
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	220f      	movs	r2, #15
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4013      	ands	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	691a      	ldr	r2, [r3, #16]
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4313      	orrs	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	08da      	lsrs	r2, r3, #3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	3208      	adds	r2, #8
 8001182:	69b9      	ldr	r1, [r7, #24]
 8001184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	2203      	movs	r2, #3
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4013      	ands	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 0203 	and.w	r2, r3, #3
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	f000 80ae 	beq.w	8001326 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	4b5d      	ldr	r3, [pc, #372]	@ (8001344 <HAL_GPIO_Init+0x300>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011d2:	4a5c      	ldr	r2, [pc, #368]	@ (8001344 <HAL_GPIO_Init+0x300>)
 80011d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011da:	4b5a      	ldr	r3, [pc, #360]	@ (8001344 <HAL_GPIO_Init+0x300>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011e6:	4a58      	ldr	r2, [pc, #352]	@ (8001348 <HAL_GPIO_Init+0x304>)
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	089b      	lsrs	r3, r3, #2
 80011ec:	3302      	adds	r3, #2
 80011ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	f003 0303 	and.w	r3, r3, #3
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	220f      	movs	r2, #15
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43db      	mvns	r3, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4013      	ands	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a4f      	ldr	r2, [pc, #316]	@ (800134c <HAL_GPIO_Init+0x308>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d025      	beq.n	800125e <HAL_GPIO_Init+0x21a>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a4e      	ldr	r2, [pc, #312]	@ (8001350 <HAL_GPIO_Init+0x30c>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d01f      	beq.n	800125a <HAL_GPIO_Init+0x216>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a4d      	ldr	r2, [pc, #308]	@ (8001354 <HAL_GPIO_Init+0x310>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d019      	beq.n	8001256 <HAL_GPIO_Init+0x212>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a4c      	ldr	r2, [pc, #304]	@ (8001358 <HAL_GPIO_Init+0x314>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d013      	beq.n	8001252 <HAL_GPIO_Init+0x20e>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a4b      	ldr	r2, [pc, #300]	@ (800135c <HAL_GPIO_Init+0x318>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d00d      	beq.n	800124e <HAL_GPIO_Init+0x20a>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a4a      	ldr	r2, [pc, #296]	@ (8001360 <HAL_GPIO_Init+0x31c>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d007      	beq.n	800124a <HAL_GPIO_Init+0x206>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a49      	ldr	r2, [pc, #292]	@ (8001364 <HAL_GPIO_Init+0x320>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d101      	bne.n	8001246 <HAL_GPIO_Init+0x202>
 8001242:	2306      	movs	r3, #6
 8001244:	e00c      	b.n	8001260 <HAL_GPIO_Init+0x21c>
 8001246:	2307      	movs	r3, #7
 8001248:	e00a      	b.n	8001260 <HAL_GPIO_Init+0x21c>
 800124a:	2305      	movs	r3, #5
 800124c:	e008      	b.n	8001260 <HAL_GPIO_Init+0x21c>
 800124e:	2304      	movs	r3, #4
 8001250:	e006      	b.n	8001260 <HAL_GPIO_Init+0x21c>
 8001252:	2303      	movs	r3, #3
 8001254:	e004      	b.n	8001260 <HAL_GPIO_Init+0x21c>
 8001256:	2302      	movs	r3, #2
 8001258:	e002      	b.n	8001260 <HAL_GPIO_Init+0x21c>
 800125a:	2301      	movs	r3, #1
 800125c:	e000      	b.n	8001260 <HAL_GPIO_Init+0x21c>
 800125e:	2300      	movs	r3, #0
 8001260:	69fa      	ldr	r2, [r7, #28]
 8001262:	f002 0203 	and.w	r2, r2, #3
 8001266:	0092      	lsls	r2, r2, #2
 8001268:	4093      	lsls	r3, r2
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4313      	orrs	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001270:	4935      	ldr	r1, [pc, #212]	@ (8001348 <HAL_GPIO_Init+0x304>)
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	089b      	lsrs	r3, r3, #2
 8001276:	3302      	adds	r3, #2
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800127e:	4b3a      	ldr	r3, [pc, #232]	@ (8001368 <HAL_GPIO_Init+0x324>)
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	43db      	mvns	r3, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4013      	ands	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	4313      	orrs	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012a2:	4a31      	ldr	r2, [pc, #196]	@ (8001368 <HAL_GPIO_Init+0x324>)
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012a8:	4b2f      	ldr	r3, [pc, #188]	@ (8001368 <HAL_GPIO_Init+0x324>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	43db      	mvns	r3, r3
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4013      	ands	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d003      	beq.n	80012cc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012cc:	4a26      	ldr	r2, [pc, #152]	@ (8001368 <HAL_GPIO_Init+0x324>)
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012d2:	4b25      	ldr	r3, [pc, #148]	@ (8001368 <HAL_GPIO_Init+0x324>)
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	43db      	mvns	r3, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4013      	ands	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d003      	beq.n	80012f6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012f6:	4a1c      	ldr	r2, [pc, #112]	@ (8001368 <HAL_GPIO_Init+0x324>)
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001368 <HAL_GPIO_Init+0x324>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	43db      	mvns	r3, r3
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4013      	ands	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d003      	beq.n	8001320 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	4313      	orrs	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001320:	4a11      	ldr	r2, [pc, #68]	@ (8001368 <HAL_GPIO_Init+0x324>)
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	3301      	adds	r3, #1
 800132a:	61fb      	str	r3, [r7, #28]
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	2b0f      	cmp	r3, #15
 8001330:	f67f ae96 	bls.w	8001060 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001334:	bf00      	nop
 8001336:	bf00      	nop
 8001338:	3724      	adds	r7, #36	@ 0x24
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	40023800 	.word	0x40023800
 8001348:	40013800 	.word	0x40013800
 800134c:	40020000 	.word	0x40020000
 8001350:	40020400 	.word	0x40020400
 8001354:	40020800 	.word	0x40020800
 8001358:	40020c00 	.word	0x40020c00
 800135c:	40021000 	.word	0x40021000
 8001360:	40021400 	.word	0x40021400
 8001364:	40021800 	.word	0x40021800
 8001368:	40013c00 	.word	0x40013c00

0800136c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	460b      	mov	r3, r1
 8001376:	807b      	strh	r3, [r7, #2]
 8001378:	4613      	mov	r3, r2
 800137a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800137c:	787b      	ldrb	r3, [r7, #1]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001382:	887a      	ldrh	r2, [r7, #2]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001388:	e003      	b.n	8001392 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800138a:	887b      	ldrh	r3, [r7, #2]
 800138c:	041a      	lsls	r2, r3, #16
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	619a      	str	r2, [r3, #24]
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
	...

080013a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d101      	bne.n	80013b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e0cc      	b.n	800154e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013b4:	4b68      	ldr	r3, [pc, #416]	@ (8001558 <HAL_RCC_ClockConfig+0x1b8>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 030f 	and.w	r3, r3, #15
 80013bc:	683a      	ldr	r2, [r7, #0]
 80013be:	429a      	cmp	r2, r3
 80013c0:	d90c      	bls.n	80013dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013c2:	4b65      	ldr	r3, [pc, #404]	@ (8001558 <HAL_RCC_ClockConfig+0x1b8>)
 80013c4:	683a      	ldr	r2, [r7, #0]
 80013c6:	b2d2      	uxtb	r2, r2
 80013c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013ca:	4b63      	ldr	r3, [pc, #396]	@ (8001558 <HAL_RCC_ClockConfig+0x1b8>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 030f 	and.w	r3, r3, #15
 80013d2:	683a      	ldr	r2, [r7, #0]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d001      	beq.n	80013dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e0b8      	b.n	800154e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0302 	and.w	r3, r3, #2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d020      	beq.n	800142a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0304 	and.w	r3, r3, #4
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d005      	beq.n	8001400 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013f4:	4b59      	ldr	r3, [pc, #356]	@ (800155c <HAL_RCC_ClockConfig+0x1bc>)
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	4a58      	ldr	r2, [pc, #352]	@ (800155c <HAL_RCC_ClockConfig+0x1bc>)
 80013fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80013fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 0308 	and.w	r3, r3, #8
 8001408:	2b00      	cmp	r3, #0
 800140a:	d005      	beq.n	8001418 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800140c:	4b53      	ldr	r3, [pc, #332]	@ (800155c <HAL_RCC_ClockConfig+0x1bc>)
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	4a52      	ldr	r2, [pc, #328]	@ (800155c <HAL_RCC_ClockConfig+0x1bc>)
 8001412:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001416:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001418:	4b50      	ldr	r3, [pc, #320]	@ (800155c <HAL_RCC_ClockConfig+0x1bc>)
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	494d      	ldr	r1, [pc, #308]	@ (800155c <HAL_RCC_ClockConfig+0x1bc>)
 8001426:	4313      	orrs	r3, r2
 8001428:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	2b00      	cmp	r3, #0
 8001434:	d044      	beq.n	80014c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d107      	bne.n	800144e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800143e:	4b47      	ldr	r3, [pc, #284]	@ (800155c <HAL_RCC_ClockConfig+0x1bc>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d119      	bne.n	800147e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e07f      	b.n	800154e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	2b02      	cmp	r3, #2
 8001454:	d003      	beq.n	800145e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800145a:	2b03      	cmp	r3, #3
 800145c:	d107      	bne.n	800146e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800145e:	4b3f      	ldr	r3, [pc, #252]	@ (800155c <HAL_RCC_ClockConfig+0x1bc>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d109      	bne.n	800147e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e06f      	b.n	800154e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800146e:	4b3b      	ldr	r3, [pc, #236]	@ (800155c <HAL_RCC_ClockConfig+0x1bc>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d101      	bne.n	800147e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e067      	b.n	800154e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800147e:	4b37      	ldr	r3, [pc, #220]	@ (800155c <HAL_RCC_ClockConfig+0x1bc>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	f023 0203 	bic.w	r2, r3, #3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	4934      	ldr	r1, [pc, #208]	@ (800155c <HAL_RCC_ClockConfig+0x1bc>)
 800148c:	4313      	orrs	r3, r2
 800148e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001490:	f7ff fc28 	bl	8000ce4 <HAL_GetTick>
 8001494:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001496:	e00a      	b.n	80014ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001498:	f7ff fc24 	bl	8000ce4 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e04f      	b.n	800154e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ae:	4b2b      	ldr	r3, [pc, #172]	@ (800155c <HAL_RCC_ClockConfig+0x1bc>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f003 020c 	and.w	r2, r3, #12
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	429a      	cmp	r2, r3
 80014be:	d1eb      	bne.n	8001498 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014c0:	4b25      	ldr	r3, [pc, #148]	@ (8001558 <HAL_RCC_ClockConfig+0x1b8>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 030f 	and.w	r3, r3, #15
 80014c8:	683a      	ldr	r2, [r7, #0]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d20c      	bcs.n	80014e8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ce:	4b22      	ldr	r3, [pc, #136]	@ (8001558 <HAL_RCC_ClockConfig+0x1b8>)
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	b2d2      	uxtb	r2, r2
 80014d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014d6:	4b20      	ldr	r3, [pc, #128]	@ (8001558 <HAL_RCC_ClockConfig+0x1b8>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 030f 	and.w	r3, r3, #15
 80014de:	683a      	ldr	r2, [r7, #0]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d001      	beq.n	80014e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e032      	b.n	800154e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0304 	and.w	r3, r3, #4
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d008      	beq.n	8001506 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014f4:	4b19      	ldr	r3, [pc, #100]	@ (800155c <HAL_RCC_ClockConfig+0x1bc>)
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	4916      	ldr	r1, [pc, #88]	@ (800155c <HAL_RCC_ClockConfig+0x1bc>)
 8001502:	4313      	orrs	r3, r2
 8001504:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0308 	and.w	r3, r3, #8
 800150e:	2b00      	cmp	r3, #0
 8001510:	d009      	beq.n	8001526 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001512:	4b12      	ldr	r3, [pc, #72]	@ (800155c <HAL_RCC_ClockConfig+0x1bc>)
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	691b      	ldr	r3, [r3, #16]
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	490e      	ldr	r1, [pc, #56]	@ (800155c <HAL_RCC_ClockConfig+0x1bc>)
 8001522:	4313      	orrs	r3, r2
 8001524:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001526:	f000 f855 	bl	80015d4 <HAL_RCC_GetSysClockFreq>
 800152a:	4602      	mov	r2, r0
 800152c:	4b0b      	ldr	r3, [pc, #44]	@ (800155c <HAL_RCC_ClockConfig+0x1bc>)
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	091b      	lsrs	r3, r3, #4
 8001532:	f003 030f 	and.w	r3, r3, #15
 8001536:	490a      	ldr	r1, [pc, #40]	@ (8001560 <HAL_RCC_ClockConfig+0x1c0>)
 8001538:	5ccb      	ldrb	r3, [r1, r3]
 800153a:	fa22 f303 	lsr.w	r3, r2, r3
 800153e:	4a09      	ldr	r2, [pc, #36]	@ (8001564 <HAL_RCC_ClockConfig+0x1c4>)
 8001540:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001542:	4b09      	ldr	r3, [pc, #36]	@ (8001568 <HAL_RCC_ClockConfig+0x1c8>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff fb88 	bl	8000c5c <HAL_InitTick>

  return HAL_OK;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40023c00 	.word	0x40023c00
 800155c:	40023800 	.word	0x40023800
 8001560:	08003dc8 	.word	0x08003dc8
 8001564:	20000000 	.word	0x20000000
 8001568:	20000004 	.word	0x20000004

0800156c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001570:	4b03      	ldr	r3, [pc, #12]	@ (8001580 <HAL_RCC_GetHCLKFreq+0x14>)
 8001572:	681b      	ldr	r3, [r3, #0]
}
 8001574:	4618      	mov	r0, r3
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	20000000 	.word	0x20000000

08001584 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001588:	f7ff fff0 	bl	800156c <HAL_RCC_GetHCLKFreq>
 800158c:	4602      	mov	r2, r0
 800158e:	4b05      	ldr	r3, [pc, #20]	@ (80015a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	0a9b      	lsrs	r3, r3, #10
 8001594:	f003 0307 	and.w	r3, r3, #7
 8001598:	4903      	ldr	r1, [pc, #12]	@ (80015a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800159a:	5ccb      	ldrb	r3, [r1, r3]
 800159c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40023800 	.word	0x40023800
 80015a8:	08003dd8 	.word	0x08003dd8

080015ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80015b0:	f7ff ffdc 	bl	800156c <HAL_RCC_GetHCLKFreq>
 80015b4:	4602      	mov	r2, r0
 80015b6:	4b05      	ldr	r3, [pc, #20]	@ (80015cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	0b5b      	lsrs	r3, r3, #13
 80015bc:	f003 0307 	and.w	r3, r3, #7
 80015c0:	4903      	ldr	r1, [pc, #12]	@ (80015d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80015c2:	5ccb      	ldrb	r3, [r1, r3]
 80015c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40023800 	.word	0x40023800
 80015d0:	08003dd8 	.word	0x08003dd8

080015d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015d8:	b0ae      	sub	sp, #184	@ 0xb8
 80015da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80015dc:	2300      	movs	r3, #0
 80015de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80015e2:	2300      	movs	r3, #0
 80015e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80015e8:	2300      	movs	r3, #0
 80015ea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80015ee:	2300      	movs	r3, #0
 80015f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80015f4:	2300      	movs	r3, #0
 80015f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015fa:	4bcb      	ldr	r3, [pc, #812]	@ (8001928 <HAL_RCC_GetSysClockFreq+0x354>)
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f003 030c 	and.w	r3, r3, #12
 8001602:	2b0c      	cmp	r3, #12
 8001604:	f200 8206 	bhi.w	8001a14 <HAL_RCC_GetSysClockFreq+0x440>
 8001608:	a201      	add	r2, pc, #4	@ (adr r2, 8001610 <HAL_RCC_GetSysClockFreq+0x3c>)
 800160a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800160e:	bf00      	nop
 8001610:	08001645 	.word	0x08001645
 8001614:	08001a15 	.word	0x08001a15
 8001618:	08001a15 	.word	0x08001a15
 800161c:	08001a15 	.word	0x08001a15
 8001620:	0800164d 	.word	0x0800164d
 8001624:	08001a15 	.word	0x08001a15
 8001628:	08001a15 	.word	0x08001a15
 800162c:	08001a15 	.word	0x08001a15
 8001630:	08001655 	.word	0x08001655
 8001634:	08001a15 	.word	0x08001a15
 8001638:	08001a15 	.word	0x08001a15
 800163c:	08001a15 	.word	0x08001a15
 8001640:	08001845 	.word	0x08001845
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001644:	4bb9      	ldr	r3, [pc, #740]	@ (800192c <HAL_RCC_GetSysClockFreq+0x358>)
 8001646:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800164a:	e1e7      	b.n	8001a1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800164c:	4bb8      	ldr	r3, [pc, #736]	@ (8001930 <HAL_RCC_GetSysClockFreq+0x35c>)
 800164e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001652:	e1e3      	b.n	8001a1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001654:	4bb4      	ldr	r3, [pc, #720]	@ (8001928 <HAL_RCC_GetSysClockFreq+0x354>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800165c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001660:	4bb1      	ldr	r3, [pc, #708]	@ (8001928 <HAL_RCC_GetSysClockFreq+0x354>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d071      	beq.n	8001750 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800166c:	4bae      	ldr	r3, [pc, #696]	@ (8001928 <HAL_RCC_GetSysClockFreq+0x354>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	099b      	lsrs	r3, r3, #6
 8001672:	2200      	movs	r2, #0
 8001674:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001678:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800167c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001680:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001684:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001688:	2300      	movs	r3, #0
 800168a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800168e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001692:	4622      	mov	r2, r4
 8001694:	462b      	mov	r3, r5
 8001696:	f04f 0000 	mov.w	r0, #0
 800169a:	f04f 0100 	mov.w	r1, #0
 800169e:	0159      	lsls	r1, r3, #5
 80016a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016a4:	0150      	lsls	r0, r2, #5
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4621      	mov	r1, r4
 80016ac:	1a51      	subs	r1, r2, r1
 80016ae:	6439      	str	r1, [r7, #64]	@ 0x40
 80016b0:	4629      	mov	r1, r5
 80016b2:	eb63 0301 	sbc.w	r3, r3, r1
 80016b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80016b8:	f04f 0200 	mov.w	r2, #0
 80016bc:	f04f 0300 	mov.w	r3, #0
 80016c0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80016c4:	4649      	mov	r1, r9
 80016c6:	018b      	lsls	r3, r1, #6
 80016c8:	4641      	mov	r1, r8
 80016ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016ce:	4641      	mov	r1, r8
 80016d0:	018a      	lsls	r2, r1, #6
 80016d2:	4641      	mov	r1, r8
 80016d4:	1a51      	subs	r1, r2, r1
 80016d6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80016d8:	4649      	mov	r1, r9
 80016da:	eb63 0301 	sbc.w	r3, r3, r1
 80016de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80016e0:	f04f 0200 	mov.w	r2, #0
 80016e4:	f04f 0300 	mov.w	r3, #0
 80016e8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80016ec:	4649      	mov	r1, r9
 80016ee:	00cb      	lsls	r3, r1, #3
 80016f0:	4641      	mov	r1, r8
 80016f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80016f6:	4641      	mov	r1, r8
 80016f8:	00ca      	lsls	r2, r1, #3
 80016fa:	4610      	mov	r0, r2
 80016fc:	4619      	mov	r1, r3
 80016fe:	4603      	mov	r3, r0
 8001700:	4622      	mov	r2, r4
 8001702:	189b      	adds	r3, r3, r2
 8001704:	633b      	str	r3, [r7, #48]	@ 0x30
 8001706:	462b      	mov	r3, r5
 8001708:	460a      	mov	r2, r1
 800170a:	eb42 0303 	adc.w	r3, r2, r3
 800170e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001710:	f04f 0200 	mov.w	r2, #0
 8001714:	f04f 0300 	mov.w	r3, #0
 8001718:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800171c:	4629      	mov	r1, r5
 800171e:	024b      	lsls	r3, r1, #9
 8001720:	4621      	mov	r1, r4
 8001722:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001726:	4621      	mov	r1, r4
 8001728:	024a      	lsls	r2, r1, #9
 800172a:	4610      	mov	r0, r2
 800172c:	4619      	mov	r1, r3
 800172e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001732:	2200      	movs	r2, #0
 8001734:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001738:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800173c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001740:	f7fe fd60 	bl	8000204 <__aeabi_uldivmod>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	4613      	mov	r3, r2
 800174a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800174e:	e067      	b.n	8001820 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001750:	4b75      	ldr	r3, [pc, #468]	@ (8001928 <HAL_RCC_GetSysClockFreq+0x354>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	099b      	lsrs	r3, r3, #6
 8001756:	2200      	movs	r2, #0
 8001758:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800175c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001760:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001764:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001768:	67bb      	str	r3, [r7, #120]	@ 0x78
 800176a:	2300      	movs	r3, #0
 800176c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800176e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001772:	4622      	mov	r2, r4
 8001774:	462b      	mov	r3, r5
 8001776:	f04f 0000 	mov.w	r0, #0
 800177a:	f04f 0100 	mov.w	r1, #0
 800177e:	0159      	lsls	r1, r3, #5
 8001780:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001784:	0150      	lsls	r0, r2, #5
 8001786:	4602      	mov	r2, r0
 8001788:	460b      	mov	r3, r1
 800178a:	4621      	mov	r1, r4
 800178c:	1a51      	subs	r1, r2, r1
 800178e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001790:	4629      	mov	r1, r5
 8001792:	eb63 0301 	sbc.w	r3, r3, r1
 8001796:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001798:	f04f 0200 	mov.w	r2, #0
 800179c:	f04f 0300 	mov.w	r3, #0
 80017a0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80017a4:	4649      	mov	r1, r9
 80017a6:	018b      	lsls	r3, r1, #6
 80017a8:	4641      	mov	r1, r8
 80017aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017ae:	4641      	mov	r1, r8
 80017b0:	018a      	lsls	r2, r1, #6
 80017b2:	4641      	mov	r1, r8
 80017b4:	ebb2 0a01 	subs.w	sl, r2, r1
 80017b8:	4649      	mov	r1, r9
 80017ba:	eb63 0b01 	sbc.w	fp, r3, r1
 80017be:	f04f 0200 	mov.w	r2, #0
 80017c2:	f04f 0300 	mov.w	r3, #0
 80017c6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80017ca:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80017ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80017d2:	4692      	mov	sl, r2
 80017d4:	469b      	mov	fp, r3
 80017d6:	4623      	mov	r3, r4
 80017d8:	eb1a 0303 	adds.w	r3, sl, r3
 80017dc:	623b      	str	r3, [r7, #32]
 80017de:	462b      	mov	r3, r5
 80017e0:	eb4b 0303 	adc.w	r3, fp, r3
 80017e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80017e6:	f04f 0200 	mov.w	r2, #0
 80017ea:	f04f 0300 	mov.w	r3, #0
 80017ee:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80017f2:	4629      	mov	r1, r5
 80017f4:	028b      	lsls	r3, r1, #10
 80017f6:	4621      	mov	r1, r4
 80017f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017fc:	4621      	mov	r1, r4
 80017fe:	028a      	lsls	r2, r1, #10
 8001800:	4610      	mov	r0, r2
 8001802:	4619      	mov	r1, r3
 8001804:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001808:	2200      	movs	r2, #0
 800180a:	673b      	str	r3, [r7, #112]	@ 0x70
 800180c:	677a      	str	r2, [r7, #116]	@ 0x74
 800180e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001812:	f7fe fcf7 	bl	8000204 <__aeabi_uldivmod>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	4613      	mov	r3, r2
 800181c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001820:	4b41      	ldr	r3, [pc, #260]	@ (8001928 <HAL_RCC_GetSysClockFreq+0x354>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	0c1b      	lsrs	r3, r3, #16
 8001826:	f003 0303 	and.w	r3, r3, #3
 800182a:	3301      	adds	r3, #1
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001832:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001836:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800183a:	fbb2 f3f3 	udiv	r3, r2, r3
 800183e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001842:	e0eb      	b.n	8001a1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001844:	4b38      	ldr	r3, [pc, #224]	@ (8001928 <HAL_RCC_GetSysClockFreq+0x354>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800184c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001850:	4b35      	ldr	r3, [pc, #212]	@ (8001928 <HAL_RCC_GetSysClockFreq+0x354>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d06b      	beq.n	8001934 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800185c:	4b32      	ldr	r3, [pc, #200]	@ (8001928 <HAL_RCC_GetSysClockFreq+0x354>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	099b      	lsrs	r3, r3, #6
 8001862:	2200      	movs	r2, #0
 8001864:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001866:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001868:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800186a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800186e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001870:	2300      	movs	r3, #0
 8001872:	667b      	str	r3, [r7, #100]	@ 0x64
 8001874:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001878:	4622      	mov	r2, r4
 800187a:	462b      	mov	r3, r5
 800187c:	f04f 0000 	mov.w	r0, #0
 8001880:	f04f 0100 	mov.w	r1, #0
 8001884:	0159      	lsls	r1, r3, #5
 8001886:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800188a:	0150      	lsls	r0, r2, #5
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	4621      	mov	r1, r4
 8001892:	1a51      	subs	r1, r2, r1
 8001894:	61b9      	str	r1, [r7, #24]
 8001896:	4629      	mov	r1, r5
 8001898:	eb63 0301 	sbc.w	r3, r3, r1
 800189c:	61fb      	str	r3, [r7, #28]
 800189e:	f04f 0200 	mov.w	r2, #0
 80018a2:	f04f 0300 	mov.w	r3, #0
 80018a6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80018aa:	4659      	mov	r1, fp
 80018ac:	018b      	lsls	r3, r1, #6
 80018ae:	4651      	mov	r1, sl
 80018b0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018b4:	4651      	mov	r1, sl
 80018b6:	018a      	lsls	r2, r1, #6
 80018b8:	4651      	mov	r1, sl
 80018ba:	ebb2 0801 	subs.w	r8, r2, r1
 80018be:	4659      	mov	r1, fp
 80018c0:	eb63 0901 	sbc.w	r9, r3, r1
 80018c4:	f04f 0200 	mov.w	r2, #0
 80018c8:	f04f 0300 	mov.w	r3, #0
 80018cc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018d0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018d4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018d8:	4690      	mov	r8, r2
 80018da:	4699      	mov	r9, r3
 80018dc:	4623      	mov	r3, r4
 80018de:	eb18 0303 	adds.w	r3, r8, r3
 80018e2:	613b      	str	r3, [r7, #16]
 80018e4:	462b      	mov	r3, r5
 80018e6:	eb49 0303 	adc.w	r3, r9, r3
 80018ea:	617b      	str	r3, [r7, #20]
 80018ec:	f04f 0200 	mov.w	r2, #0
 80018f0:	f04f 0300 	mov.w	r3, #0
 80018f4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80018f8:	4629      	mov	r1, r5
 80018fa:	024b      	lsls	r3, r1, #9
 80018fc:	4621      	mov	r1, r4
 80018fe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001902:	4621      	mov	r1, r4
 8001904:	024a      	lsls	r2, r1, #9
 8001906:	4610      	mov	r0, r2
 8001908:	4619      	mov	r1, r3
 800190a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800190e:	2200      	movs	r2, #0
 8001910:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001912:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001914:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001918:	f7fe fc74 	bl	8000204 <__aeabi_uldivmod>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	4613      	mov	r3, r2
 8001922:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001926:	e065      	b.n	80019f4 <HAL_RCC_GetSysClockFreq+0x420>
 8001928:	40023800 	.word	0x40023800
 800192c:	00f42400 	.word	0x00f42400
 8001930:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001934:	4b3d      	ldr	r3, [pc, #244]	@ (8001a2c <HAL_RCC_GetSysClockFreq+0x458>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	099b      	lsrs	r3, r3, #6
 800193a:	2200      	movs	r2, #0
 800193c:	4618      	mov	r0, r3
 800193e:	4611      	mov	r1, r2
 8001940:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001944:	653b      	str	r3, [r7, #80]	@ 0x50
 8001946:	2300      	movs	r3, #0
 8001948:	657b      	str	r3, [r7, #84]	@ 0x54
 800194a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800194e:	4642      	mov	r2, r8
 8001950:	464b      	mov	r3, r9
 8001952:	f04f 0000 	mov.w	r0, #0
 8001956:	f04f 0100 	mov.w	r1, #0
 800195a:	0159      	lsls	r1, r3, #5
 800195c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001960:	0150      	lsls	r0, r2, #5
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4641      	mov	r1, r8
 8001968:	1a51      	subs	r1, r2, r1
 800196a:	60b9      	str	r1, [r7, #8]
 800196c:	4649      	mov	r1, r9
 800196e:	eb63 0301 	sbc.w	r3, r3, r1
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	f04f 0200 	mov.w	r2, #0
 8001978:	f04f 0300 	mov.w	r3, #0
 800197c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001980:	4659      	mov	r1, fp
 8001982:	018b      	lsls	r3, r1, #6
 8001984:	4651      	mov	r1, sl
 8001986:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800198a:	4651      	mov	r1, sl
 800198c:	018a      	lsls	r2, r1, #6
 800198e:	4651      	mov	r1, sl
 8001990:	1a54      	subs	r4, r2, r1
 8001992:	4659      	mov	r1, fp
 8001994:	eb63 0501 	sbc.w	r5, r3, r1
 8001998:	f04f 0200 	mov.w	r2, #0
 800199c:	f04f 0300 	mov.w	r3, #0
 80019a0:	00eb      	lsls	r3, r5, #3
 80019a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019a6:	00e2      	lsls	r2, r4, #3
 80019a8:	4614      	mov	r4, r2
 80019aa:	461d      	mov	r5, r3
 80019ac:	4643      	mov	r3, r8
 80019ae:	18e3      	adds	r3, r4, r3
 80019b0:	603b      	str	r3, [r7, #0]
 80019b2:	464b      	mov	r3, r9
 80019b4:	eb45 0303 	adc.w	r3, r5, r3
 80019b8:	607b      	str	r3, [r7, #4]
 80019ba:	f04f 0200 	mov.w	r2, #0
 80019be:	f04f 0300 	mov.w	r3, #0
 80019c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019c6:	4629      	mov	r1, r5
 80019c8:	028b      	lsls	r3, r1, #10
 80019ca:	4621      	mov	r1, r4
 80019cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019d0:	4621      	mov	r1, r4
 80019d2:	028a      	lsls	r2, r1, #10
 80019d4:	4610      	mov	r0, r2
 80019d6:	4619      	mov	r1, r3
 80019d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80019dc:	2200      	movs	r2, #0
 80019de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80019e0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80019e2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80019e6:	f7fe fc0d 	bl	8000204 <__aeabi_uldivmod>
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	4613      	mov	r3, r2
 80019f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80019f4:	4b0d      	ldr	r3, [pc, #52]	@ (8001a2c <HAL_RCC_GetSysClockFreq+0x458>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	0f1b      	lsrs	r3, r3, #28
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001a02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001a06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001a12:	e003      	b.n	8001a1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a14:	4b06      	ldr	r3, [pc, #24]	@ (8001a30 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001a16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001a1a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	37b8      	adds	r7, #184	@ 0xb8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	00f42400 	.word	0x00f42400

08001a34 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e28d      	b.n	8001f62 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f000 8083 	beq.w	8001b5a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001a54:	4b94      	ldr	r3, [pc, #592]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f003 030c 	and.w	r3, r3, #12
 8001a5c:	2b04      	cmp	r3, #4
 8001a5e:	d019      	beq.n	8001a94 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001a60:	4b91      	ldr	r3, [pc, #580]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f003 030c 	and.w	r3, r3, #12
        || \
 8001a68:	2b08      	cmp	r3, #8
 8001a6a:	d106      	bne.n	8001a7a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001a6c:	4b8e      	ldr	r3, [pc, #568]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a78:	d00c      	beq.n	8001a94 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a7a:	4b8b      	ldr	r3, [pc, #556]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001a82:	2b0c      	cmp	r3, #12
 8001a84:	d112      	bne.n	8001aac <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a86:	4b88      	ldr	r3, [pc, #544]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a92:	d10b      	bne.n	8001aac <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a94:	4b84      	ldr	r3, [pc, #528]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d05b      	beq.n	8001b58 <HAL_RCC_OscConfig+0x124>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d157      	bne.n	8001b58 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e25a      	b.n	8001f62 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ab4:	d106      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x90>
 8001ab6:	4b7c      	ldr	r3, [pc, #496]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a7b      	ldr	r2, [pc, #492]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001abc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ac0:	6013      	str	r3, [r2, #0]
 8001ac2:	e01d      	b.n	8001b00 <HAL_RCC_OscConfig+0xcc>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001acc:	d10c      	bne.n	8001ae8 <HAL_RCC_OscConfig+0xb4>
 8001ace:	4b76      	ldr	r3, [pc, #472]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a75      	ldr	r2, [pc, #468]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001ad4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ad8:	6013      	str	r3, [r2, #0]
 8001ada:	4b73      	ldr	r3, [pc, #460]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a72      	ldr	r2, [pc, #456]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001ae0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ae4:	6013      	str	r3, [r2, #0]
 8001ae6:	e00b      	b.n	8001b00 <HAL_RCC_OscConfig+0xcc>
 8001ae8:	4b6f      	ldr	r3, [pc, #444]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a6e      	ldr	r2, [pc, #440]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001aee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001af2:	6013      	str	r3, [r2, #0]
 8001af4:	4b6c      	ldr	r3, [pc, #432]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a6b      	ldr	r2, [pc, #428]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001afa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001afe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d013      	beq.n	8001b30 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b08:	f7ff f8ec 	bl	8000ce4 <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b10:	f7ff f8e8 	bl	8000ce4 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b64      	cmp	r3, #100	@ 0x64
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e21f      	b.n	8001f62 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b22:	4b61      	ldr	r3, [pc, #388]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d0f0      	beq.n	8001b10 <HAL_RCC_OscConfig+0xdc>
 8001b2e:	e014      	b.n	8001b5a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b30:	f7ff f8d8 	bl	8000ce4 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b38:	f7ff f8d4 	bl	8000ce4 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b64      	cmp	r3, #100	@ 0x64
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e20b      	b.n	8001f62 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b4a:	4b57      	ldr	r3, [pc, #348]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1f0      	bne.n	8001b38 <HAL_RCC_OscConfig+0x104>
 8001b56:	e000      	b.n	8001b5a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d06f      	beq.n	8001c46 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001b66:	4b50      	ldr	r3, [pc, #320]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 030c 	and.w	r3, r3, #12
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d017      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001b72:	4b4d      	ldr	r3, [pc, #308]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f003 030c 	and.w	r3, r3, #12
        || \
 8001b7a:	2b08      	cmp	r3, #8
 8001b7c:	d105      	bne.n	8001b8a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001b7e:	4b4a      	ldr	r3, [pc, #296]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d00b      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b8a:	4b47      	ldr	r3, [pc, #284]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001b92:	2b0c      	cmp	r3, #12
 8001b94:	d11c      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b96:	4b44      	ldr	r3, [pc, #272]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d116      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ba2:	4b41      	ldr	r3, [pc, #260]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d005      	beq.n	8001bba <HAL_RCC_OscConfig+0x186>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d001      	beq.n	8001bba <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e1d3      	b.n	8001f62 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bba:	4b3b      	ldr	r3, [pc, #236]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	4937      	ldr	r1, [pc, #220]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bce:	e03a      	b.n	8001c46 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d020      	beq.n	8001c1a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bd8:	4b34      	ldr	r3, [pc, #208]	@ (8001cac <HAL_RCC_OscConfig+0x278>)
 8001bda:	2201      	movs	r2, #1
 8001bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bde:	f7ff f881 	bl	8000ce4 <HAL_GetTick>
 8001be2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be4:	e008      	b.n	8001bf8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001be6:	f7ff f87d 	bl	8000ce4 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e1b4      	b.n	8001f62 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf8:	4b2b      	ldr	r3, [pc, #172]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0302 	and.w	r3, r3, #2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d0f0      	beq.n	8001be6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c04:	4b28      	ldr	r3, [pc, #160]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	4925      	ldr	r1, [pc, #148]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	600b      	str	r3, [r1, #0]
 8001c18:	e015      	b.n	8001c46 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c1a:	4b24      	ldr	r3, [pc, #144]	@ (8001cac <HAL_RCC_OscConfig+0x278>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c20:	f7ff f860 	bl	8000ce4 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c28:	f7ff f85c 	bl	8000ce4 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e193      	b.n	8001f62 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c3a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1f0      	bne.n	8001c28 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0308 	and.w	r3, r3, #8
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d036      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	695b      	ldr	r3, [r3, #20]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d016      	beq.n	8001c88 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c5a:	4b15      	ldr	r3, [pc, #84]	@ (8001cb0 <HAL_RCC_OscConfig+0x27c>)
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c60:	f7ff f840 	bl	8000ce4 <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c68:	f7ff f83c 	bl	8000ce4 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e173      	b.n	8001f62 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001c7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d0f0      	beq.n	8001c68 <HAL_RCC_OscConfig+0x234>
 8001c86:	e01b      	b.n	8001cc0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c88:	4b09      	ldr	r3, [pc, #36]	@ (8001cb0 <HAL_RCC_OscConfig+0x27c>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c8e:	f7ff f829 	bl	8000ce4 <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c94:	e00e      	b.n	8001cb4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c96:	f7ff f825 	bl	8000ce4 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d907      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e15c      	b.n	8001f62 <HAL_RCC_OscConfig+0x52e>
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	42470000 	.word	0x42470000
 8001cb0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cb4:	4b8a      	ldr	r3, [pc, #552]	@ (8001ee0 <HAL_RCC_OscConfig+0x4ac>)
 8001cb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d1ea      	bne.n	8001c96 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0304 	and.w	r3, r3, #4
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	f000 8097 	beq.w	8001dfc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cd2:	4b83      	ldr	r3, [pc, #524]	@ (8001ee0 <HAL_RCC_OscConfig+0x4ac>)
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d10f      	bne.n	8001cfe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60bb      	str	r3, [r7, #8]
 8001ce2:	4b7f      	ldr	r3, [pc, #508]	@ (8001ee0 <HAL_RCC_OscConfig+0x4ac>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce6:	4a7e      	ldr	r2, [pc, #504]	@ (8001ee0 <HAL_RCC_OscConfig+0x4ac>)
 8001ce8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cec:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cee:	4b7c      	ldr	r3, [pc, #496]	@ (8001ee0 <HAL_RCC_OscConfig+0x4ac>)
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cf6:	60bb      	str	r3, [r7, #8]
 8001cf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cfe:	4b79      	ldr	r3, [pc, #484]	@ (8001ee4 <HAL_RCC_OscConfig+0x4b0>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d118      	bne.n	8001d3c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d0a:	4b76      	ldr	r3, [pc, #472]	@ (8001ee4 <HAL_RCC_OscConfig+0x4b0>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a75      	ldr	r2, [pc, #468]	@ (8001ee4 <HAL_RCC_OscConfig+0x4b0>)
 8001d10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d16:	f7fe ffe5 	bl	8000ce4 <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d1e:	f7fe ffe1 	bl	8000ce4 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e118      	b.n	8001f62 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d30:	4b6c      	ldr	r3, [pc, #432]	@ (8001ee4 <HAL_RCC_OscConfig+0x4b0>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0f0      	beq.n	8001d1e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d106      	bne.n	8001d52 <HAL_RCC_OscConfig+0x31e>
 8001d44:	4b66      	ldr	r3, [pc, #408]	@ (8001ee0 <HAL_RCC_OscConfig+0x4ac>)
 8001d46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d48:	4a65      	ldr	r2, [pc, #404]	@ (8001ee0 <HAL_RCC_OscConfig+0x4ac>)
 8001d4a:	f043 0301 	orr.w	r3, r3, #1
 8001d4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d50:	e01c      	b.n	8001d8c <HAL_RCC_OscConfig+0x358>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	2b05      	cmp	r3, #5
 8001d58:	d10c      	bne.n	8001d74 <HAL_RCC_OscConfig+0x340>
 8001d5a:	4b61      	ldr	r3, [pc, #388]	@ (8001ee0 <HAL_RCC_OscConfig+0x4ac>)
 8001d5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d5e:	4a60      	ldr	r2, [pc, #384]	@ (8001ee0 <HAL_RCC_OscConfig+0x4ac>)
 8001d60:	f043 0304 	orr.w	r3, r3, #4
 8001d64:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d66:	4b5e      	ldr	r3, [pc, #376]	@ (8001ee0 <HAL_RCC_OscConfig+0x4ac>)
 8001d68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d6a:	4a5d      	ldr	r2, [pc, #372]	@ (8001ee0 <HAL_RCC_OscConfig+0x4ac>)
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d72:	e00b      	b.n	8001d8c <HAL_RCC_OscConfig+0x358>
 8001d74:	4b5a      	ldr	r3, [pc, #360]	@ (8001ee0 <HAL_RCC_OscConfig+0x4ac>)
 8001d76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d78:	4a59      	ldr	r2, [pc, #356]	@ (8001ee0 <HAL_RCC_OscConfig+0x4ac>)
 8001d7a:	f023 0301 	bic.w	r3, r3, #1
 8001d7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d80:	4b57      	ldr	r3, [pc, #348]	@ (8001ee0 <HAL_RCC_OscConfig+0x4ac>)
 8001d82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d84:	4a56      	ldr	r2, [pc, #344]	@ (8001ee0 <HAL_RCC_OscConfig+0x4ac>)
 8001d86:	f023 0304 	bic.w	r3, r3, #4
 8001d8a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d015      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d94:	f7fe ffa6 	bl	8000ce4 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d9a:	e00a      	b.n	8001db2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d9c:	f7fe ffa2 	bl	8000ce4 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e0d7      	b.n	8001f62 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001db2:	4b4b      	ldr	r3, [pc, #300]	@ (8001ee0 <HAL_RCC_OscConfig+0x4ac>)
 8001db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d0ee      	beq.n	8001d9c <HAL_RCC_OscConfig+0x368>
 8001dbe:	e014      	b.n	8001dea <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc0:	f7fe ff90 	bl	8000ce4 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dc6:	e00a      	b.n	8001dde <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dc8:	f7fe ff8c 	bl	8000ce4 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e0c1      	b.n	8001f62 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dde:	4b40      	ldr	r3, [pc, #256]	@ (8001ee0 <HAL_RCC_OscConfig+0x4ac>)
 8001de0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1ee      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001dea:	7dfb      	ldrb	r3, [r7, #23]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d105      	bne.n	8001dfc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001df0:	4b3b      	ldr	r3, [pc, #236]	@ (8001ee0 <HAL_RCC_OscConfig+0x4ac>)
 8001df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df4:	4a3a      	ldr	r2, [pc, #232]	@ (8001ee0 <HAL_RCC_OscConfig+0x4ac>)
 8001df6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001dfa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f000 80ad 	beq.w	8001f60 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e06:	4b36      	ldr	r3, [pc, #216]	@ (8001ee0 <HAL_RCC_OscConfig+0x4ac>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f003 030c 	and.w	r3, r3, #12
 8001e0e:	2b08      	cmp	r3, #8
 8001e10:	d060      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d145      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e1a:	4b33      	ldr	r3, [pc, #204]	@ (8001ee8 <HAL_RCC_OscConfig+0x4b4>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e20:	f7fe ff60 	bl	8000ce4 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e28:	f7fe ff5c 	bl	8000ce4 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e093      	b.n	8001f62 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e3a:	4b29      	ldr	r3, [pc, #164]	@ (8001ee0 <HAL_RCC_OscConfig+0x4ac>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1f0      	bne.n	8001e28 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	69da      	ldr	r2, [r3, #28]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a1b      	ldr	r3, [r3, #32]
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e54:	019b      	lsls	r3, r3, #6
 8001e56:	431a      	orrs	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e5c:	085b      	lsrs	r3, r3, #1
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	041b      	lsls	r3, r3, #16
 8001e62:	431a      	orrs	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e68:	061b      	lsls	r3, r3, #24
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e70:	071b      	lsls	r3, r3, #28
 8001e72:	491b      	ldr	r1, [pc, #108]	@ (8001ee0 <HAL_RCC_OscConfig+0x4ac>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e78:	4b1b      	ldr	r3, [pc, #108]	@ (8001ee8 <HAL_RCC_OscConfig+0x4b4>)
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7e:	f7fe ff31 	bl	8000ce4 <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e84:	e008      	b.n	8001e98 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e86:	f7fe ff2d 	bl	8000ce4 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e064      	b.n	8001f62 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e98:	4b11      	ldr	r3, [pc, #68]	@ (8001ee0 <HAL_RCC_OscConfig+0x4ac>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d0f0      	beq.n	8001e86 <HAL_RCC_OscConfig+0x452>
 8001ea4:	e05c      	b.n	8001f60 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ea6:	4b10      	ldr	r3, [pc, #64]	@ (8001ee8 <HAL_RCC_OscConfig+0x4b4>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eac:	f7fe ff1a 	bl	8000ce4 <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb4:	f7fe ff16 	bl	8000ce4 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e04d      	b.n	8001f62 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ec6:	4b06      	ldr	r3, [pc, #24]	@ (8001ee0 <HAL_RCC_OscConfig+0x4ac>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1f0      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x480>
 8001ed2:	e045      	b.n	8001f60 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d107      	bne.n	8001eec <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e040      	b.n	8001f62 <HAL_RCC_OscConfig+0x52e>
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	40007000 	.word	0x40007000
 8001ee8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001eec:	4b1f      	ldr	r3, [pc, #124]	@ (8001f6c <HAL_RCC_OscConfig+0x538>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d030      	beq.n	8001f5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d129      	bne.n	8001f5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d122      	bne.n	8001f5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001f22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d119      	bne.n	8001f5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f32:	085b      	lsrs	r3, r3, #1
 8001f34:	3b01      	subs	r3, #1
 8001f36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d10f      	bne.n	8001f5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d107      	bne.n	8001f5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f56:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d001      	beq.n	8001f60 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e000      	b.n	8001f62 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3718      	adds	r7, #24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40023800 	.word	0x40023800

08001f70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e041      	b.n	8002006 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d106      	bne.n	8001f9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7fe fd3e 	bl	8000a18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	3304      	adds	r3, #4
 8001fac:	4619      	mov	r1, r3
 8001fae:	4610      	mov	r0, r2
 8001fb0:	f000 fad8 	bl	8002564 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b082      	sub	sp, #8
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d101      	bne.n	8002020 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e041      	b.n	80020a4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002026:	b2db      	uxtb	r3, r3
 8002028:	2b00      	cmp	r3, #0
 800202a:	d106      	bne.n	800203a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f000 f839 	bl	80020ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2202      	movs	r2, #2
 800203e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	3304      	adds	r3, #4
 800204a:	4619      	mov	r1, r3
 800204c:	4610      	mov	r0, r2
 800204e:	f000 fa89 	bl	8002564 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2201      	movs	r2, #1
 800205e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2201      	movs	r2, #1
 8002066:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2201      	movs	r2, #1
 800207e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2201      	movs	r2, #1
 8002086:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2201      	movs	r2, #1
 8002096:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2201      	movs	r2, #1
 800209e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d109      	bne.n	80020e4 <HAL_TIM_PWM_Start+0x24>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	2b01      	cmp	r3, #1
 80020da:	bf14      	ite	ne
 80020dc:	2301      	movne	r3, #1
 80020de:	2300      	moveq	r3, #0
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	e022      	b.n	800212a <HAL_TIM_PWM_Start+0x6a>
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	2b04      	cmp	r3, #4
 80020e8:	d109      	bne.n	80020fe <HAL_TIM_PWM_Start+0x3e>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	bf14      	ite	ne
 80020f6:	2301      	movne	r3, #1
 80020f8:	2300      	moveq	r3, #0
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	e015      	b.n	800212a <HAL_TIM_PWM_Start+0x6a>
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	2b08      	cmp	r3, #8
 8002102:	d109      	bne.n	8002118 <HAL_TIM_PWM_Start+0x58>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800210a:	b2db      	uxtb	r3, r3
 800210c:	2b01      	cmp	r3, #1
 800210e:	bf14      	ite	ne
 8002110:	2301      	movne	r3, #1
 8002112:	2300      	moveq	r3, #0
 8002114:	b2db      	uxtb	r3, r3
 8002116:	e008      	b.n	800212a <HAL_TIM_PWM_Start+0x6a>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800211e:	b2db      	uxtb	r3, r3
 8002120:	2b01      	cmp	r3, #1
 8002122:	bf14      	ite	ne
 8002124:	2301      	movne	r3, #1
 8002126:	2300      	moveq	r3, #0
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e07c      	b.n	800222c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d104      	bne.n	8002142 <HAL_TIM_PWM_Start+0x82>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2202      	movs	r2, #2
 800213c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002140:	e013      	b.n	800216a <HAL_TIM_PWM_Start+0xaa>
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	2b04      	cmp	r3, #4
 8002146:	d104      	bne.n	8002152 <HAL_TIM_PWM_Start+0x92>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2202      	movs	r2, #2
 800214c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002150:	e00b      	b.n	800216a <HAL_TIM_PWM_Start+0xaa>
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	2b08      	cmp	r3, #8
 8002156:	d104      	bne.n	8002162 <HAL_TIM_PWM_Start+0xa2>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2202      	movs	r2, #2
 800215c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002160:	e003      	b.n	800216a <HAL_TIM_PWM_Start+0xaa>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2202      	movs	r2, #2
 8002166:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2201      	movs	r2, #1
 8002170:	6839      	ldr	r1, [r7, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f000 fce6 	bl	8002b44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a2d      	ldr	r2, [pc, #180]	@ (8002234 <HAL_TIM_PWM_Start+0x174>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d004      	beq.n	800218c <HAL_TIM_PWM_Start+0xcc>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a2c      	ldr	r2, [pc, #176]	@ (8002238 <HAL_TIM_PWM_Start+0x178>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d101      	bne.n	8002190 <HAL_TIM_PWM_Start+0xd0>
 800218c:	2301      	movs	r3, #1
 800218e:	e000      	b.n	8002192 <HAL_TIM_PWM_Start+0xd2>
 8002190:	2300      	movs	r3, #0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d007      	beq.n	80021a6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80021a4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a22      	ldr	r2, [pc, #136]	@ (8002234 <HAL_TIM_PWM_Start+0x174>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d022      	beq.n	80021f6 <HAL_TIM_PWM_Start+0x136>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021b8:	d01d      	beq.n	80021f6 <HAL_TIM_PWM_Start+0x136>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a1f      	ldr	r2, [pc, #124]	@ (800223c <HAL_TIM_PWM_Start+0x17c>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d018      	beq.n	80021f6 <HAL_TIM_PWM_Start+0x136>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a1d      	ldr	r2, [pc, #116]	@ (8002240 <HAL_TIM_PWM_Start+0x180>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d013      	beq.n	80021f6 <HAL_TIM_PWM_Start+0x136>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a1c      	ldr	r2, [pc, #112]	@ (8002244 <HAL_TIM_PWM_Start+0x184>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d00e      	beq.n	80021f6 <HAL_TIM_PWM_Start+0x136>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a16      	ldr	r2, [pc, #88]	@ (8002238 <HAL_TIM_PWM_Start+0x178>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d009      	beq.n	80021f6 <HAL_TIM_PWM_Start+0x136>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a18      	ldr	r2, [pc, #96]	@ (8002248 <HAL_TIM_PWM_Start+0x188>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d004      	beq.n	80021f6 <HAL_TIM_PWM_Start+0x136>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a16      	ldr	r2, [pc, #88]	@ (800224c <HAL_TIM_PWM_Start+0x18c>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d111      	bne.n	800221a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2b06      	cmp	r3, #6
 8002206:	d010      	beq.n	800222a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f042 0201 	orr.w	r2, r2, #1
 8002216:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002218:	e007      	b.n	800222a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f042 0201 	orr.w	r2, r2, #1
 8002228:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	3710      	adds	r7, #16
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40010000 	.word	0x40010000
 8002238:	40010400 	.word	0x40010400
 800223c:	40000400 	.word	0x40000400
 8002240:	40000800 	.word	0x40000800
 8002244:	40000c00 	.word	0x40000c00
 8002248:	40014000 	.word	0x40014000
 800224c:	40001800 	.word	0x40001800

08002250 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800225c:	2300      	movs	r3, #0
 800225e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002266:	2b01      	cmp	r3, #1
 8002268:	d101      	bne.n	800226e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800226a:	2302      	movs	r3, #2
 800226c:	e0ae      	b.n	80023cc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2201      	movs	r2, #1
 8002272:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2b0c      	cmp	r3, #12
 800227a:	f200 809f 	bhi.w	80023bc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800227e:	a201      	add	r2, pc, #4	@ (adr r2, 8002284 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002284:	080022b9 	.word	0x080022b9
 8002288:	080023bd 	.word	0x080023bd
 800228c:	080023bd 	.word	0x080023bd
 8002290:	080023bd 	.word	0x080023bd
 8002294:	080022f9 	.word	0x080022f9
 8002298:	080023bd 	.word	0x080023bd
 800229c:	080023bd 	.word	0x080023bd
 80022a0:	080023bd 	.word	0x080023bd
 80022a4:	0800233b 	.word	0x0800233b
 80022a8:	080023bd 	.word	0x080023bd
 80022ac:	080023bd 	.word	0x080023bd
 80022b0:	080023bd 	.word	0x080023bd
 80022b4:	0800237b 	.word	0x0800237b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68b9      	ldr	r1, [r7, #8]
 80022be:	4618      	mov	r0, r3
 80022c0:	f000 f9f6 	bl	80026b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	699a      	ldr	r2, [r3, #24]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f042 0208 	orr.w	r2, r2, #8
 80022d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	699a      	ldr	r2, [r3, #24]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f022 0204 	bic.w	r2, r2, #4
 80022e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	6999      	ldr	r1, [r3, #24]
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	691a      	ldr	r2, [r3, #16]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	430a      	orrs	r2, r1
 80022f4:	619a      	str	r2, [r3, #24]
      break;
 80022f6:	e064      	b.n	80023c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68b9      	ldr	r1, [r7, #8]
 80022fe:	4618      	mov	r0, r3
 8002300:	f000 fa46 	bl	8002790 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	699a      	ldr	r2, [r3, #24]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002312:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	699a      	ldr	r2, [r3, #24]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002322:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6999      	ldr	r1, [r3, #24]
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	021a      	lsls	r2, r3, #8
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	430a      	orrs	r2, r1
 8002336:	619a      	str	r2, [r3, #24]
      break;
 8002338:	e043      	b.n	80023c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68b9      	ldr	r1, [r7, #8]
 8002340:	4618      	mov	r0, r3
 8002342:	f000 fa9b 	bl	800287c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	69da      	ldr	r2, [r3, #28]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f042 0208 	orr.w	r2, r2, #8
 8002354:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	69da      	ldr	r2, [r3, #28]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f022 0204 	bic.w	r2, r2, #4
 8002364:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	69d9      	ldr	r1, [r3, #28]
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	691a      	ldr	r2, [r3, #16]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	430a      	orrs	r2, r1
 8002376:	61da      	str	r2, [r3, #28]
      break;
 8002378:	e023      	b.n	80023c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68b9      	ldr	r1, [r7, #8]
 8002380:	4618      	mov	r0, r3
 8002382:	f000 faef 	bl	8002964 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	69da      	ldr	r2, [r3, #28]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002394:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	69da      	ldr	r2, [r3, #28]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	69d9      	ldr	r1, [r3, #28]
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	021a      	lsls	r2, r3, #8
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	430a      	orrs	r2, r1
 80023b8:	61da      	str	r2, [r3, #28]
      break;
 80023ba:	e002      	b.n	80023c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	75fb      	strb	r3, [r7, #23]
      break;
 80023c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80023ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3718      	adds	r7, #24
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023de:	2300      	movs	r3, #0
 80023e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d101      	bne.n	80023f0 <HAL_TIM_ConfigClockSource+0x1c>
 80023ec:	2302      	movs	r3, #2
 80023ee:	e0b4      	b.n	800255a <HAL_TIM_ConfigClockSource+0x186>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2202      	movs	r2, #2
 80023fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800240e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002416:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68ba      	ldr	r2, [r7, #8]
 800241e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002428:	d03e      	beq.n	80024a8 <HAL_TIM_ConfigClockSource+0xd4>
 800242a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800242e:	f200 8087 	bhi.w	8002540 <HAL_TIM_ConfigClockSource+0x16c>
 8002432:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002436:	f000 8086 	beq.w	8002546 <HAL_TIM_ConfigClockSource+0x172>
 800243a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800243e:	d87f      	bhi.n	8002540 <HAL_TIM_ConfigClockSource+0x16c>
 8002440:	2b70      	cmp	r3, #112	@ 0x70
 8002442:	d01a      	beq.n	800247a <HAL_TIM_ConfigClockSource+0xa6>
 8002444:	2b70      	cmp	r3, #112	@ 0x70
 8002446:	d87b      	bhi.n	8002540 <HAL_TIM_ConfigClockSource+0x16c>
 8002448:	2b60      	cmp	r3, #96	@ 0x60
 800244a:	d050      	beq.n	80024ee <HAL_TIM_ConfigClockSource+0x11a>
 800244c:	2b60      	cmp	r3, #96	@ 0x60
 800244e:	d877      	bhi.n	8002540 <HAL_TIM_ConfigClockSource+0x16c>
 8002450:	2b50      	cmp	r3, #80	@ 0x50
 8002452:	d03c      	beq.n	80024ce <HAL_TIM_ConfigClockSource+0xfa>
 8002454:	2b50      	cmp	r3, #80	@ 0x50
 8002456:	d873      	bhi.n	8002540 <HAL_TIM_ConfigClockSource+0x16c>
 8002458:	2b40      	cmp	r3, #64	@ 0x40
 800245a:	d058      	beq.n	800250e <HAL_TIM_ConfigClockSource+0x13a>
 800245c:	2b40      	cmp	r3, #64	@ 0x40
 800245e:	d86f      	bhi.n	8002540 <HAL_TIM_ConfigClockSource+0x16c>
 8002460:	2b30      	cmp	r3, #48	@ 0x30
 8002462:	d064      	beq.n	800252e <HAL_TIM_ConfigClockSource+0x15a>
 8002464:	2b30      	cmp	r3, #48	@ 0x30
 8002466:	d86b      	bhi.n	8002540 <HAL_TIM_ConfigClockSource+0x16c>
 8002468:	2b20      	cmp	r3, #32
 800246a:	d060      	beq.n	800252e <HAL_TIM_ConfigClockSource+0x15a>
 800246c:	2b20      	cmp	r3, #32
 800246e:	d867      	bhi.n	8002540 <HAL_TIM_ConfigClockSource+0x16c>
 8002470:	2b00      	cmp	r3, #0
 8002472:	d05c      	beq.n	800252e <HAL_TIM_ConfigClockSource+0x15a>
 8002474:	2b10      	cmp	r3, #16
 8002476:	d05a      	beq.n	800252e <HAL_TIM_ConfigClockSource+0x15a>
 8002478:	e062      	b.n	8002540 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800248a:	f000 fb3b 	bl	8002b04 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800249c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68ba      	ldr	r2, [r7, #8]
 80024a4:	609a      	str	r2, [r3, #8]
      break;
 80024a6:	e04f      	b.n	8002548 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80024b8:	f000 fb24 	bl	8002b04 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689a      	ldr	r2, [r3, #8]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80024ca:	609a      	str	r2, [r3, #8]
      break;
 80024cc:	e03c      	b.n	8002548 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024da:	461a      	mov	r2, r3
 80024dc:	f000 fa98 	bl	8002a10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2150      	movs	r1, #80	@ 0x50
 80024e6:	4618      	mov	r0, r3
 80024e8:	f000 faf1 	bl	8002ace <TIM_ITRx_SetConfig>
      break;
 80024ec:	e02c      	b.n	8002548 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80024fa:	461a      	mov	r2, r3
 80024fc:	f000 fab7 	bl	8002a6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2160      	movs	r1, #96	@ 0x60
 8002506:	4618      	mov	r0, r3
 8002508:	f000 fae1 	bl	8002ace <TIM_ITRx_SetConfig>
      break;
 800250c:	e01c      	b.n	8002548 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800251a:	461a      	mov	r2, r3
 800251c:	f000 fa78 	bl	8002a10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2140      	movs	r1, #64	@ 0x40
 8002526:	4618      	mov	r0, r3
 8002528:	f000 fad1 	bl	8002ace <TIM_ITRx_SetConfig>
      break;
 800252c:	e00c      	b.n	8002548 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4619      	mov	r1, r3
 8002538:	4610      	mov	r0, r2
 800253a:	f000 fac8 	bl	8002ace <TIM_ITRx_SetConfig>
      break;
 800253e:	e003      	b.n	8002548 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	73fb      	strb	r3, [r7, #15]
      break;
 8002544:	e000      	b.n	8002548 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002546:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002558:	7bfb      	ldrb	r3, [r7, #15]
}
 800255a:	4618      	mov	r0, r3
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
	...

08002564 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4a43      	ldr	r2, [pc, #268]	@ (8002684 <TIM_Base_SetConfig+0x120>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d013      	beq.n	80025a4 <TIM_Base_SetConfig+0x40>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002582:	d00f      	beq.n	80025a4 <TIM_Base_SetConfig+0x40>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a40      	ldr	r2, [pc, #256]	@ (8002688 <TIM_Base_SetConfig+0x124>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d00b      	beq.n	80025a4 <TIM_Base_SetConfig+0x40>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4a3f      	ldr	r2, [pc, #252]	@ (800268c <TIM_Base_SetConfig+0x128>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d007      	beq.n	80025a4 <TIM_Base_SetConfig+0x40>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a3e      	ldr	r2, [pc, #248]	@ (8002690 <TIM_Base_SetConfig+0x12c>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d003      	beq.n	80025a4 <TIM_Base_SetConfig+0x40>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4a3d      	ldr	r2, [pc, #244]	@ (8002694 <TIM_Base_SetConfig+0x130>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d108      	bne.n	80025b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	68fa      	ldr	r2, [r7, #12]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a32      	ldr	r2, [pc, #200]	@ (8002684 <TIM_Base_SetConfig+0x120>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d02b      	beq.n	8002616 <TIM_Base_SetConfig+0xb2>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025c4:	d027      	beq.n	8002616 <TIM_Base_SetConfig+0xb2>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a2f      	ldr	r2, [pc, #188]	@ (8002688 <TIM_Base_SetConfig+0x124>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d023      	beq.n	8002616 <TIM_Base_SetConfig+0xb2>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a2e      	ldr	r2, [pc, #184]	@ (800268c <TIM_Base_SetConfig+0x128>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d01f      	beq.n	8002616 <TIM_Base_SetConfig+0xb2>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a2d      	ldr	r2, [pc, #180]	@ (8002690 <TIM_Base_SetConfig+0x12c>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d01b      	beq.n	8002616 <TIM_Base_SetConfig+0xb2>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a2c      	ldr	r2, [pc, #176]	@ (8002694 <TIM_Base_SetConfig+0x130>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d017      	beq.n	8002616 <TIM_Base_SetConfig+0xb2>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a2b      	ldr	r2, [pc, #172]	@ (8002698 <TIM_Base_SetConfig+0x134>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d013      	beq.n	8002616 <TIM_Base_SetConfig+0xb2>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a2a      	ldr	r2, [pc, #168]	@ (800269c <TIM_Base_SetConfig+0x138>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d00f      	beq.n	8002616 <TIM_Base_SetConfig+0xb2>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a29      	ldr	r2, [pc, #164]	@ (80026a0 <TIM_Base_SetConfig+0x13c>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d00b      	beq.n	8002616 <TIM_Base_SetConfig+0xb2>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a28      	ldr	r2, [pc, #160]	@ (80026a4 <TIM_Base_SetConfig+0x140>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d007      	beq.n	8002616 <TIM_Base_SetConfig+0xb2>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a27      	ldr	r2, [pc, #156]	@ (80026a8 <TIM_Base_SetConfig+0x144>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d003      	beq.n	8002616 <TIM_Base_SetConfig+0xb2>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a26      	ldr	r2, [pc, #152]	@ (80026ac <TIM_Base_SetConfig+0x148>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d108      	bne.n	8002628 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800261c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	68fa      	ldr	r2, [r7, #12]
 8002624:	4313      	orrs	r3, r2
 8002626:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	4313      	orrs	r3, r2
 8002634:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	689a      	ldr	r2, [r3, #8]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a0e      	ldr	r2, [pc, #56]	@ (8002684 <TIM_Base_SetConfig+0x120>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d003      	beq.n	8002656 <TIM_Base_SetConfig+0xf2>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a10      	ldr	r2, [pc, #64]	@ (8002694 <TIM_Base_SetConfig+0x130>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d103      	bne.n	800265e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	691a      	ldr	r2, [r3, #16]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f043 0204 	orr.w	r2, r3, #4
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2201      	movs	r2, #1
 800266e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	601a      	str	r2, [r3, #0]
}
 8002676:	bf00      	nop
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	40010000 	.word	0x40010000
 8002688:	40000400 	.word	0x40000400
 800268c:	40000800 	.word	0x40000800
 8002690:	40000c00 	.word	0x40000c00
 8002694:	40010400 	.word	0x40010400
 8002698:	40014000 	.word	0x40014000
 800269c:	40014400 	.word	0x40014400
 80026a0:	40014800 	.word	0x40014800
 80026a4:	40001800 	.word	0x40001800
 80026a8:	40001c00 	.word	0x40001c00
 80026ac:	40002000 	.word	0x40002000

080026b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b087      	sub	sp, #28
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a1b      	ldr	r3, [r3, #32]
 80026be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a1b      	ldr	r3, [r3, #32]
 80026c4:	f023 0201 	bic.w	r2, r3, #1
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f023 0303 	bic.w	r3, r3, #3
 80026e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	f023 0302 	bic.w	r3, r3, #2
 80026f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	4313      	orrs	r3, r2
 8002702:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a20      	ldr	r2, [pc, #128]	@ (8002788 <TIM_OC1_SetConfig+0xd8>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d003      	beq.n	8002714 <TIM_OC1_SetConfig+0x64>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a1f      	ldr	r2, [pc, #124]	@ (800278c <TIM_OC1_SetConfig+0xdc>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d10c      	bne.n	800272e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	f023 0308 	bic.w	r3, r3, #8
 800271a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	697a      	ldr	r2, [r7, #20]
 8002722:	4313      	orrs	r3, r2
 8002724:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	f023 0304 	bic.w	r3, r3, #4
 800272c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a15      	ldr	r2, [pc, #84]	@ (8002788 <TIM_OC1_SetConfig+0xd8>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d003      	beq.n	800273e <TIM_OC1_SetConfig+0x8e>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a14      	ldr	r2, [pc, #80]	@ (800278c <TIM_OC1_SetConfig+0xdc>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d111      	bne.n	8002762 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002744:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800274c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	4313      	orrs	r3, r2
 8002756:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	4313      	orrs	r3, r2
 8002760:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	697a      	ldr	r2, [r7, #20]
 800277a:	621a      	str	r2, [r3, #32]
}
 800277c:	bf00      	nop
 800277e:	371c      	adds	r7, #28
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr
 8002788:	40010000 	.word	0x40010000
 800278c:	40010400 	.word	0x40010400

08002790 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002790:	b480      	push	{r7}
 8002792:	b087      	sub	sp, #28
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a1b      	ldr	r3, [r3, #32]
 80027a4:	f023 0210 	bic.w	r2, r3, #16
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80027be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	021b      	lsls	r3, r3, #8
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	f023 0320 	bic.w	r3, r3, #32
 80027da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	011b      	lsls	r3, r3, #4
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a22      	ldr	r2, [pc, #136]	@ (8002874 <TIM_OC2_SetConfig+0xe4>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d003      	beq.n	80027f8 <TIM_OC2_SetConfig+0x68>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a21      	ldr	r2, [pc, #132]	@ (8002878 <TIM_OC2_SetConfig+0xe8>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d10d      	bne.n	8002814 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80027fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	011b      	lsls	r3, r3, #4
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	4313      	orrs	r3, r2
 800280a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002812:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4a17      	ldr	r2, [pc, #92]	@ (8002874 <TIM_OC2_SetConfig+0xe4>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d003      	beq.n	8002824 <TIM_OC2_SetConfig+0x94>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4a16      	ldr	r2, [pc, #88]	@ (8002878 <TIM_OC2_SetConfig+0xe8>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d113      	bne.n	800284c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800282a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002832:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	695b      	ldr	r3, [r3, #20]
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	4313      	orrs	r3, r2
 800283e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	4313      	orrs	r3, r2
 800284a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685a      	ldr	r2, [r3, #4]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	621a      	str	r2, [r3, #32]
}
 8002866:	bf00      	nop
 8002868:	371c      	adds	r7, #28
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	40010000 	.word	0x40010000
 8002878:	40010400 	.word	0x40010400

0800287c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800287c:	b480      	push	{r7}
 800287e:	b087      	sub	sp, #28
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a1b      	ldr	r3, [r3, #32]
 800288a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a1b      	ldr	r3, [r3, #32]
 8002890:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	69db      	ldr	r3, [r3, #28]
 80028a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f023 0303 	bic.w	r3, r3, #3
 80028b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80028c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	021b      	lsls	r3, r3, #8
 80028cc:	697a      	ldr	r2, [r7, #20]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a21      	ldr	r2, [pc, #132]	@ (800295c <TIM_OC3_SetConfig+0xe0>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d003      	beq.n	80028e2 <TIM_OC3_SetConfig+0x66>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a20      	ldr	r2, [pc, #128]	@ (8002960 <TIM_OC3_SetConfig+0xe4>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d10d      	bne.n	80028fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80028e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	021b      	lsls	r3, r3, #8
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80028fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a16      	ldr	r2, [pc, #88]	@ (800295c <TIM_OC3_SetConfig+0xe0>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d003      	beq.n	800290e <TIM_OC3_SetConfig+0x92>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a15      	ldr	r2, [pc, #84]	@ (8002960 <TIM_OC3_SetConfig+0xe4>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d113      	bne.n	8002936 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002914:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800291c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	011b      	lsls	r3, r3, #4
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	4313      	orrs	r3, r2
 8002928:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	011b      	lsls	r3, r3, #4
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	4313      	orrs	r3, r2
 8002934:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685a      	ldr	r2, [r3, #4]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	697a      	ldr	r2, [r7, #20]
 800294e:	621a      	str	r2, [r3, #32]
}
 8002950:	bf00      	nop
 8002952:	371c      	adds	r7, #28
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr
 800295c:	40010000 	.word	0x40010000
 8002960:	40010400 	.word	0x40010400

08002964 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002964:	b480      	push	{r7}
 8002966:	b087      	sub	sp, #28
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a1b      	ldr	r3, [r3, #32]
 8002978:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	69db      	ldr	r3, [r3, #28]
 800298a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800299a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	021b      	lsls	r3, r3, #8
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80029ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	031b      	lsls	r3, r3, #12
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a12      	ldr	r2, [pc, #72]	@ (8002a08 <TIM_OC4_SetConfig+0xa4>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d003      	beq.n	80029cc <TIM_OC4_SetConfig+0x68>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a11      	ldr	r2, [pc, #68]	@ (8002a0c <TIM_OC4_SetConfig+0xa8>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d109      	bne.n	80029e0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80029d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	695b      	ldr	r3, [r3, #20]
 80029d8:	019b      	lsls	r3, r3, #6
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	4313      	orrs	r3, r2
 80029de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685a      	ldr	r2, [r3, #4]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	621a      	str	r2, [r3, #32]
}
 80029fa:	bf00      	nop
 80029fc:	371c      	adds	r7, #28
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	40010000 	.word	0x40010000
 8002a0c:	40010400 	.word	0x40010400

08002a10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b087      	sub	sp, #28
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6a1b      	ldr	r3, [r3, #32]
 8002a26:	f023 0201 	bic.w	r2, r3, #1
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	011b      	lsls	r3, r3, #4
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	f023 030a 	bic.w	r3, r3, #10
 8002a4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a4e:	697a      	ldr	r2, [r7, #20]
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	621a      	str	r2, [r3, #32]
}
 8002a62:	bf00      	nop
 8002a64:	371c      	adds	r7, #28
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b087      	sub	sp, #28
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	60f8      	str	r0, [r7, #12]
 8002a76:	60b9      	str	r1, [r7, #8]
 8002a78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	f023 0210 	bic.w	r2, r3, #16
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002a98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	031b      	lsls	r3, r3, #12
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002aaa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	011b      	lsls	r3, r3, #4
 8002ab0:	697a      	ldr	r2, [r7, #20]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	621a      	str	r2, [r3, #32]
}
 8002ac2:	bf00      	nop
 8002ac4:	371c      	adds	r7, #28
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr

08002ace <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b085      	sub	sp, #20
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
 8002ad6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ae4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	f043 0307 	orr.w	r3, r3, #7
 8002af0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	609a      	str	r2, [r3, #8]
}
 8002af8:	bf00      	nop
 8002afa:	3714      	adds	r7, #20
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b087      	sub	sp, #28
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
 8002b10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002b1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	021a      	lsls	r2, r3, #8
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	431a      	orrs	r2, r3
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	697a      	ldr	r2, [r7, #20]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	609a      	str	r2, [r3, #8]
}
 8002b38:	bf00      	nop
 8002b3a:	371c      	adds	r7, #28
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b087      	sub	sp, #28
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	f003 031f 	and.w	r3, r3, #31
 8002b56:	2201      	movs	r2, #1
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6a1a      	ldr	r2, [r3, #32]
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	43db      	mvns	r3, r3
 8002b66:	401a      	ands	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6a1a      	ldr	r2, [r3, #32]
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	f003 031f 	and.w	r3, r3, #31
 8002b76:	6879      	ldr	r1, [r7, #4]
 8002b78:	fa01 f303 	lsl.w	r3, r1, r3
 8002b7c:	431a      	orrs	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	621a      	str	r2, [r3, #32]
}
 8002b82:	bf00      	nop
 8002b84:	371c      	adds	r7, #28
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
	...

08002b90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d101      	bne.n	8002ba8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	e05a      	b.n	8002c5e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68fa      	ldr	r2, [r7, #12]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a21      	ldr	r2, [pc, #132]	@ (8002c6c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d022      	beq.n	8002c32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bf4:	d01d      	beq.n	8002c32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a1d      	ldr	r2, [pc, #116]	@ (8002c70 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d018      	beq.n	8002c32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a1b      	ldr	r2, [pc, #108]	@ (8002c74 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d013      	beq.n	8002c32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a1a      	ldr	r2, [pc, #104]	@ (8002c78 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d00e      	beq.n	8002c32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a18      	ldr	r2, [pc, #96]	@ (8002c7c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d009      	beq.n	8002c32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a17      	ldr	r2, [pc, #92]	@ (8002c80 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d004      	beq.n	8002c32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a15      	ldr	r2, [pc, #84]	@ (8002c84 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d10c      	bne.n	8002c4c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	68ba      	ldr	r2, [r7, #8]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68ba      	ldr	r2, [r7, #8]
 8002c4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3714      	adds	r7, #20
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	40010000 	.word	0x40010000
 8002c70:	40000400 	.word	0x40000400
 8002c74:	40000800 	.word	0x40000800
 8002c78:	40000c00 	.word	0x40000c00
 8002c7c:	40010400 	.word	0x40010400
 8002c80:	40014000 	.word	0x40014000
 8002c84:	40001800 	.word	0x40001800

08002c88 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002c92:	2300      	movs	r3, #0
 8002c94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d101      	bne.n	8002ca4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	e03d      	b.n	8002d20 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	695b      	ldr	r3, [r3, #20]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3714      	adds	r7, #20
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e042      	b.n	8002dc4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d106      	bne.n	8002d58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f7fd fee6 	bl	8000b24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2224      	movs	r2, #36	@ 0x24
 8002d5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68da      	ldr	r2, [r3, #12]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002d6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 fcef 	bl	8003754 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	691a      	ldr	r2, [r3, #16]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	695a      	ldr	r2, [r3, #20]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68da      	ldr	r2, [r3, #12]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002da4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2220      	movs	r2, #32
 8002db0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2220      	movs	r2, #32
 8002db8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3708      	adds	r7, #8
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b20      	cmp	r3, #32
 8002de4:	d112      	bne.n	8002e0c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d002      	beq.n	8002df2 <HAL_UART_Receive_IT+0x26>
 8002dec:	88fb      	ldrh	r3, [r7, #6]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e00b      	b.n	8002e0e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002dfc:	88fb      	ldrh	r3, [r7, #6]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	68b9      	ldr	r1, [r7, #8]
 8002e02:	68f8      	ldr	r0, [r7, #12]
 8002e04:	f000 fad2 	bl	80033ac <UART_Start_Receive_IT>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	e000      	b.n	8002e0e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002e0c:	2302      	movs	r3, #2
  }
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
	...

08002e18 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b0ba      	sub	sp, #232	@ 0xe8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002e44:	2300      	movs	r3, #0
 8002e46:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e4e:	f003 030f 	and.w	r3, r3, #15
 8002e52:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002e56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d10f      	bne.n	8002e7e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e62:	f003 0320 	and.w	r3, r3, #32
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d009      	beq.n	8002e7e <HAL_UART_IRQHandler+0x66>
 8002e6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e6e:	f003 0320 	and.w	r3, r3, #32
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d003      	beq.n	8002e7e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 fbae 	bl	80035d8 <UART_Receive_IT>
      return;
 8002e7c:	e273      	b.n	8003366 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002e7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f000 80de 	beq.w	8003044 <HAL_UART_IRQHandler+0x22c>
 8002e88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d106      	bne.n	8002ea2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e98:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f000 80d1 	beq.w	8003044 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00b      	beq.n	8002ec6 <HAL_UART_IRQHandler+0xae>
 8002eae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002eb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d005      	beq.n	8002ec6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ebe:	f043 0201 	orr.w	r2, r3, #1
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002eca:	f003 0304 	and.w	r3, r3, #4
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00b      	beq.n	8002eea <HAL_UART_IRQHandler+0xd2>
 8002ed2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d005      	beq.n	8002eea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ee2:	f043 0202 	orr.w	r2, r3, #2
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00b      	beq.n	8002f0e <HAL_UART_IRQHandler+0xf6>
 8002ef6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d005      	beq.n	8002f0e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f06:	f043 0204 	orr.w	r2, r3, #4
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f12:	f003 0308 	and.w	r3, r3, #8
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d011      	beq.n	8002f3e <HAL_UART_IRQHandler+0x126>
 8002f1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f1e:	f003 0320 	and.w	r3, r3, #32
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d105      	bne.n	8002f32 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002f26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d005      	beq.n	8002f3e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f36:	f043 0208 	orr.w	r2, r3, #8
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	f000 820a 	beq.w	800335c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f4c:	f003 0320 	and.w	r3, r3, #32
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d008      	beq.n	8002f66 <HAL_UART_IRQHandler+0x14e>
 8002f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f58:	f003 0320 	and.w	r3, r3, #32
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d002      	beq.n	8002f66 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 fb39 	bl	80035d8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	695b      	ldr	r3, [r3, #20]
 8002f6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f70:	2b40      	cmp	r3, #64	@ 0x40
 8002f72:	bf0c      	ite	eq
 8002f74:	2301      	moveq	r3, #1
 8002f76:	2300      	movne	r3, #0
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f82:	f003 0308 	and.w	r3, r3, #8
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d103      	bne.n	8002f92 <HAL_UART_IRQHandler+0x17a>
 8002f8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d04f      	beq.n	8003032 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 fa44 	bl	8003420 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fa2:	2b40      	cmp	r3, #64	@ 0x40
 8002fa4:	d141      	bne.n	800302a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	3314      	adds	r3, #20
 8002fac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002fb4:	e853 3f00 	ldrex	r3, [r3]
 8002fb8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002fbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002fc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002fc4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	3314      	adds	r3, #20
 8002fce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002fd2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002fd6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fda:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002fde:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002fe2:	e841 2300 	strex	r3, r2, [r1]
 8002fe6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002fea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1d9      	bne.n	8002fa6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d013      	beq.n	8003022 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ffe:	4a8a      	ldr	r2, [pc, #552]	@ (8003228 <HAL_UART_IRQHandler+0x410>)
 8003000:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003006:	4618      	mov	r0, r3
 8003008:	f7fd fff9 	bl	8000ffe <HAL_DMA_Abort_IT>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d016      	beq.n	8003040 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003016:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800301c:	4610      	mov	r0, r2
 800301e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003020:	e00e      	b.n	8003040 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 f9ac 	bl	8003380 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003028:	e00a      	b.n	8003040 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 f9a8 	bl	8003380 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003030:	e006      	b.n	8003040 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 f9a4 	bl	8003380 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800303e:	e18d      	b.n	800335c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003040:	bf00      	nop
    return;
 8003042:	e18b      	b.n	800335c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003048:	2b01      	cmp	r3, #1
 800304a:	f040 8167 	bne.w	800331c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800304e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003052:	f003 0310 	and.w	r3, r3, #16
 8003056:	2b00      	cmp	r3, #0
 8003058:	f000 8160 	beq.w	800331c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800305c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003060:	f003 0310 	and.w	r3, r3, #16
 8003064:	2b00      	cmp	r3, #0
 8003066:	f000 8159 	beq.w	800331c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800306a:	2300      	movs	r3, #0
 800306c:	60bb      	str	r3, [r7, #8]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	60bb      	str	r3, [r7, #8]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	60bb      	str	r3, [r7, #8]
 800307e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800308a:	2b40      	cmp	r3, #64	@ 0x40
 800308c:	f040 80ce 	bne.w	800322c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800309c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f000 80a9 	beq.w	80031f8 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80030aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80030ae:	429a      	cmp	r2, r3
 80030b0:	f080 80a2 	bcs.w	80031f8 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80030ba:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030c6:	f000 8088 	beq.w	80031da <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	330c      	adds	r3, #12
 80030d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80030d8:	e853 3f00 	ldrex	r3, [r3]
 80030dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80030e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80030e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80030e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	330c      	adds	r3, #12
 80030f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80030f6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80030fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003102:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003106:	e841 2300 	strex	r3, r2, [r1]
 800310a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800310e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1d9      	bne.n	80030ca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	3314      	adds	r3, #20
 800311c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800311e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003120:	e853 3f00 	ldrex	r3, [r3]
 8003124:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003126:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003128:	f023 0301 	bic.w	r3, r3, #1
 800312c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	3314      	adds	r3, #20
 8003136:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800313a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800313e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003140:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003142:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003146:	e841 2300 	strex	r3, r2, [r1]
 800314a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800314c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1e1      	bne.n	8003116 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	3314      	adds	r3, #20
 8003158:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800315a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800315c:	e853 3f00 	ldrex	r3, [r3]
 8003160:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003162:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003164:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003168:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	3314      	adds	r3, #20
 8003172:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003176:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003178:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800317a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800317c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800317e:	e841 2300 	strex	r3, r2, [r1]
 8003182:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003184:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1e3      	bne.n	8003152 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2220      	movs	r2, #32
 800318e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	330c      	adds	r3, #12
 800319e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031a2:	e853 3f00 	ldrex	r3, [r3]
 80031a6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80031a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031aa:	f023 0310 	bic.w	r3, r3, #16
 80031ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	330c      	adds	r3, #12
 80031b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80031bc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80031be:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80031c2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80031c4:	e841 2300 	strex	r3, r2, [r1]
 80031c8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80031ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1e3      	bne.n	8003198 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7fd fea2 	bl	8000f1e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2202      	movs	r2, #2
 80031de:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	4619      	mov	r1, r3
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 f8cf 	bl	8003394 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80031f6:	e0b3      	b.n	8003360 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80031fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003200:	429a      	cmp	r2, r3
 8003202:	f040 80ad 	bne.w	8003360 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800320a:	69db      	ldr	r3, [r3, #28]
 800320c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003210:	f040 80a6 	bne.w	8003360 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2202      	movs	r2, #2
 8003218:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800321e:	4619      	mov	r1, r3
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 f8b7 	bl	8003394 <HAL_UARTEx_RxEventCallback>
      return;
 8003226:	e09b      	b.n	8003360 <HAL_UART_IRQHandler+0x548>
 8003228:	080034e7 	.word	0x080034e7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003234:	b29b      	uxth	r3, r3
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003240:	b29b      	uxth	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	f000 808e 	beq.w	8003364 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8003248:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800324c:	2b00      	cmp	r3, #0
 800324e:	f000 8089 	beq.w	8003364 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	330c      	adds	r3, #12
 8003258:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800325a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800325c:	e853 3f00 	ldrex	r3, [r3]
 8003260:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003262:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003264:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003268:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	330c      	adds	r3, #12
 8003272:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003276:	647a      	str	r2, [r7, #68]	@ 0x44
 8003278:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800327a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800327c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800327e:	e841 2300 	strex	r3, r2, [r1]
 8003282:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003284:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1e3      	bne.n	8003252 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	3314      	adds	r3, #20
 8003290:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003294:	e853 3f00 	ldrex	r3, [r3]
 8003298:	623b      	str	r3, [r7, #32]
   return(result);
 800329a:	6a3b      	ldr	r3, [r7, #32]
 800329c:	f023 0301 	bic.w	r3, r3, #1
 80032a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	3314      	adds	r3, #20
 80032aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80032ae:	633a      	str	r2, [r7, #48]	@ 0x30
 80032b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80032b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032b6:	e841 2300 	strex	r3, r2, [r1]
 80032ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80032bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1e3      	bne.n	800328a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2220      	movs	r2, #32
 80032c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	330c      	adds	r3, #12
 80032d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	e853 3f00 	ldrex	r3, [r3]
 80032de:	60fb      	str	r3, [r7, #12]
   return(result);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f023 0310 	bic.w	r3, r3, #16
 80032e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	330c      	adds	r3, #12
 80032f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80032f4:	61fa      	str	r2, [r7, #28]
 80032f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f8:	69b9      	ldr	r1, [r7, #24]
 80032fa:	69fa      	ldr	r2, [r7, #28]
 80032fc:	e841 2300 	strex	r3, r2, [r1]
 8003300:	617b      	str	r3, [r7, #20]
   return(result);
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1e3      	bne.n	80032d0 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2202      	movs	r2, #2
 800330c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800330e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003312:	4619      	mov	r1, r3
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f000 f83d 	bl	8003394 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800331a:	e023      	b.n	8003364 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800331c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003320:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003324:	2b00      	cmp	r3, #0
 8003326:	d009      	beq.n	800333c <HAL_UART_IRQHandler+0x524>
 8003328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800332c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003330:	2b00      	cmp	r3, #0
 8003332:	d003      	beq.n	800333c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f000 f8e7 	bl	8003508 <UART_Transmit_IT>
    return;
 800333a:	e014      	b.n	8003366 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800333c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003340:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00e      	beq.n	8003366 <HAL_UART_IRQHandler+0x54e>
 8003348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800334c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003350:	2b00      	cmp	r3, #0
 8003352:	d008      	beq.n	8003366 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f000 f927 	bl	80035a8 <UART_EndTransmit_IT>
    return;
 800335a:	e004      	b.n	8003366 <HAL_UART_IRQHandler+0x54e>
    return;
 800335c:	bf00      	nop
 800335e:	e002      	b.n	8003366 <HAL_UART_IRQHandler+0x54e>
      return;
 8003360:	bf00      	nop
 8003362:	e000      	b.n	8003366 <HAL_UART_IRQHandler+0x54e>
      return;
 8003364:	bf00      	nop
  }
}
 8003366:	37e8      	adds	r7, #232	@ 0xe8
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	460b      	mov	r3, r1
 800339e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	4613      	mov	r3, r2
 80033b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	68ba      	ldr	r2, [r7, #8]
 80033be:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	88fa      	ldrh	r2, [r7, #6]
 80033c4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	88fa      	ldrh	r2, [r7, #6]
 80033ca:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2222      	movs	r2, #34	@ 0x22
 80033d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d007      	beq.n	80033f2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68da      	ldr	r2, [r3, #12]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033f0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	695a      	ldr	r2, [r3, #20]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f042 0201 	orr.w	r2, r2, #1
 8003400:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68da      	ldr	r2, [r3, #12]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f042 0220 	orr.w	r2, r2, #32
 8003410:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3714      	adds	r7, #20
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003420:	b480      	push	{r7}
 8003422:	b095      	sub	sp, #84	@ 0x54
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	330c      	adds	r3, #12
 800342e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003432:	e853 3f00 	ldrex	r3, [r3]
 8003436:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800343a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800343e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	330c      	adds	r3, #12
 8003446:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003448:	643a      	str	r2, [r7, #64]	@ 0x40
 800344a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800344c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800344e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003450:	e841 2300 	strex	r3, r2, [r1]
 8003454:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1e5      	bne.n	8003428 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	3314      	adds	r3, #20
 8003462:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003464:	6a3b      	ldr	r3, [r7, #32]
 8003466:	e853 3f00 	ldrex	r3, [r3]
 800346a:	61fb      	str	r3, [r7, #28]
   return(result);
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	f023 0301 	bic.w	r3, r3, #1
 8003472:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	3314      	adds	r3, #20
 800347a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800347c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800347e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003480:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003482:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003484:	e841 2300 	strex	r3, r2, [r1]
 8003488:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800348a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800348c:	2b00      	cmp	r3, #0
 800348e:	d1e5      	bne.n	800345c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003494:	2b01      	cmp	r3, #1
 8003496:	d119      	bne.n	80034cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	330c      	adds	r3, #12
 800349e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	e853 3f00 	ldrex	r3, [r3]
 80034a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	f023 0310 	bic.w	r3, r3, #16
 80034ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	330c      	adds	r3, #12
 80034b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034b8:	61ba      	str	r2, [r7, #24]
 80034ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034bc:	6979      	ldr	r1, [r7, #20]
 80034be:	69ba      	ldr	r2, [r7, #24]
 80034c0:	e841 2300 	strex	r3, r2, [r1]
 80034c4:	613b      	str	r3, [r7, #16]
   return(result);
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1e5      	bne.n	8003498 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2220      	movs	r2, #32
 80034d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80034da:	bf00      	nop
 80034dc:	3754      	adds	r7, #84	@ 0x54
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr

080034e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b084      	sub	sp, #16
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	f7ff ff40 	bl	8003380 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003500:	bf00      	nop
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003508:	b480      	push	{r7}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003516:	b2db      	uxtb	r3, r3
 8003518:	2b21      	cmp	r3, #33	@ 0x21
 800351a:	d13e      	bne.n	800359a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003524:	d114      	bne.n	8003550 <UART_Transmit_IT+0x48>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d110      	bne.n	8003550 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	881b      	ldrh	r3, [r3, #0]
 8003538:	461a      	mov	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003542:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a1b      	ldr	r3, [r3, #32]
 8003548:	1c9a      	adds	r2, r3, #2
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	621a      	str	r2, [r3, #32]
 800354e:	e008      	b.n	8003562 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	1c59      	adds	r1, r3, #1
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	6211      	str	r1, [r2, #32]
 800355a:	781a      	ldrb	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003566:	b29b      	uxth	r3, r3
 8003568:	3b01      	subs	r3, #1
 800356a:	b29b      	uxth	r3, r3
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	4619      	mov	r1, r3
 8003570:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10f      	bne.n	8003596 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68da      	ldr	r2, [r3, #12]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003584:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68da      	ldr	r2, [r3, #12]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003594:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003596:	2300      	movs	r3, #0
 8003598:	e000      	b.n	800359c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800359a:	2302      	movs	r3, #2
  }
}
 800359c:	4618      	mov	r0, r3
 800359e:	3714      	adds	r7, #20
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68da      	ldr	r2, [r3, #12]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035be:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2220      	movs	r2, #32
 80035c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f7ff fecf 	bl	800336c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3708      	adds	r7, #8
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b08c      	sub	sp, #48	@ 0x30
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80035e0:	2300      	movs	r3, #0
 80035e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80035e4:	2300      	movs	r3, #0
 80035e6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	2b22      	cmp	r3, #34	@ 0x22
 80035f2:	f040 80aa 	bne.w	800374a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035fe:	d115      	bne.n	800362c <UART_Receive_IT+0x54>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d111      	bne.n	800362c <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800360c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	b29b      	uxth	r3, r3
 8003616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800361a:	b29a      	uxth	r2, r3
 800361c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800361e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003624:	1c9a      	adds	r2, r3, #2
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	629a      	str	r2, [r3, #40]	@ 0x28
 800362a:	e024      	b.n	8003676 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003630:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800363a:	d007      	beq.n	800364c <UART_Receive_IT+0x74>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d10a      	bne.n	800365a <UART_Receive_IT+0x82>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d106      	bne.n	800365a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	b2da      	uxtb	r2, r3
 8003654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003656:	701a      	strb	r2, [r3, #0]
 8003658:	e008      	b.n	800366c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	b2db      	uxtb	r3, r3
 8003662:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003666:	b2da      	uxtb	r2, r3
 8003668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800366a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003670:	1c5a      	adds	r2, r3, #1
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800367a:	b29b      	uxth	r3, r3
 800367c:	3b01      	subs	r3, #1
 800367e:	b29b      	uxth	r3, r3
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	4619      	mov	r1, r3
 8003684:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003686:	2b00      	cmp	r3, #0
 8003688:	d15d      	bne.n	8003746 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68da      	ldr	r2, [r3, #12]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 0220 	bic.w	r2, r2, #32
 8003698:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68da      	ldr	r2, [r3, #12]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	695a      	ldr	r2, [r3, #20]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f022 0201 	bic.w	r2, r2, #1
 80036b8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2220      	movs	r2, #32
 80036be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d135      	bne.n	800373c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	330c      	adds	r3, #12
 80036dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	e853 3f00 	ldrex	r3, [r3]
 80036e4:	613b      	str	r3, [r7, #16]
   return(result);
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	f023 0310 	bic.w	r3, r3, #16
 80036ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	330c      	adds	r3, #12
 80036f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036f6:	623a      	str	r2, [r7, #32]
 80036f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036fa:	69f9      	ldr	r1, [r7, #28]
 80036fc:	6a3a      	ldr	r2, [r7, #32]
 80036fe:	e841 2300 	strex	r3, r2, [r1]
 8003702:	61bb      	str	r3, [r7, #24]
   return(result);
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1e5      	bne.n	80036d6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0310 	and.w	r3, r3, #16
 8003714:	2b10      	cmp	r3, #16
 8003716:	d10a      	bne.n	800372e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003718:	2300      	movs	r3, #0
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	60fb      	str	r3, [r7, #12]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	60fb      	str	r3, [r7, #12]
 800372c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003732:	4619      	mov	r1, r3
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f7ff fe2d 	bl	8003394 <HAL_UARTEx_RxEventCallback>
 800373a:	e002      	b.n	8003742 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f7fd f833 	bl	80007a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003742:	2300      	movs	r3, #0
 8003744:	e002      	b.n	800374c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003746:	2300      	movs	r3, #0
 8003748:	e000      	b.n	800374c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800374a:	2302      	movs	r3, #2
  }
}
 800374c:	4618      	mov	r0, r3
 800374e:	3730      	adds	r7, #48	@ 0x30
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003754:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003758:	b0c0      	sub	sp, #256	@ 0x100
 800375a:	af00      	add	r7, sp, #0
 800375c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800376c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003770:	68d9      	ldr	r1, [r3, #12]
 8003772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	ea40 0301 	orr.w	r3, r0, r1
 800377c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800377e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003782:	689a      	ldr	r2, [r3, #8]
 8003784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	431a      	orrs	r2, r3
 800378c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	431a      	orrs	r2, r3
 8003794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003798:	69db      	ldr	r3, [r3, #28]
 800379a:	4313      	orrs	r3, r2
 800379c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80037a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80037ac:	f021 010c 	bic.w	r1, r1, #12
 80037b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80037ba:	430b      	orrs	r3, r1
 80037bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80037ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037ce:	6999      	ldr	r1, [r3, #24]
 80037d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	ea40 0301 	orr.w	r3, r0, r1
 80037da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80037dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	4b8f      	ldr	r3, [pc, #572]	@ (8003a20 <UART_SetConfig+0x2cc>)
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d005      	beq.n	80037f4 <UART_SetConfig+0xa0>
 80037e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	4b8d      	ldr	r3, [pc, #564]	@ (8003a24 <UART_SetConfig+0x2d0>)
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d104      	bne.n	80037fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80037f4:	f7fd feda 	bl	80015ac <HAL_RCC_GetPCLK2Freq>
 80037f8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80037fc:	e003      	b.n	8003806 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80037fe:	f7fd fec1 	bl	8001584 <HAL_RCC_GetPCLK1Freq>
 8003802:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800380a:	69db      	ldr	r3, [r3, #28]
 800380c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003810:	f040 810c 	bne.w	8003a2c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003814:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003818:	2200      	movs	r2, #0
 800381a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800381e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003822:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003826:	4622      	mov	r2, r4
 8003828:	462b      	mov	r3, r5
 800382a:	1891      	adds	r1, r2, r2
 800382c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800382e:	415b      	adcs	r3, r3
 8003830:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003832:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003836:	4621      	mov	r1, r4
 8003838:	eb12 0801 	adds.w	r8, r2, r1
 800383c:	4629      	mov	r1, r5
 800383e:	eb43 0901 	adc.w	r9, r3, r1
 8003842:	f04f 0200 	mov.w	r2, #0
 8003846:	f04f 0300 	mov.w	r3, #0
 800384a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800384e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003852:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003856:	4690      	mov	r8, r2
 8003858:	4699      	mov	r9, r3
 800385a:	4623      	mov	r3, r4
 800385c:	eb18 0303 	adds.w	r3, r8, r3
 8003860:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003864:	462b      	mov	r3, r5
 8003866:	eb49 0303 	adc.w	r3, r9, r3
 800386a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800386e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800387a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800387e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003882:	460b      	mov	r3, r1
 8003884:	18db      	adds	r3, r3, r3
 8003886:	653b      	str	r3, [r7, #80]	@ 0x50
 8003888:	4613      	mov	r3, r2
 800388a:	eb42 0303 	adc.w	r3, r2, r3
 800388e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003890:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003894:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003898:	f7fc fcb4 	bl	8000204 <__aeabi_uldivmod>
 800389c:	4602      	mov	r2, r0
 800389e:	460b      	mov	r3, r1
 80038a0:	4b61      	ldr	r3, [pc, #388]	@ (8003a28 <UART_SetConfig+0x2d4>)
 80038a2:	fba3 2302 	umull	r2, r3, r3, r2
 80038a6:	095b      	lsrs	r3, r3, #5
 80038a8:	011c      	lsls	r4, r3, #4
 80038aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038ae:	2200      	movs	r2, #0
 80038b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80038b4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80038b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80038bc:	4642      	mov	r2, r8
 80038be:	464b      	mov	r3, r9
 80038c0:	1891      	adds	r1, r2, r2
 80038c2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80038c4:	415b      	adcs	r3, r3
 80038c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80038cc:	4641      	mov	r1, r8
 80038ce:	eb12 0a01 	adds.w	sl, r2, r1
 80038d2:	4649      	mov	r1, r9
 80038d4:	eb43 0b01 	adc.w	fp, r3, r1
 80038d8:	f04f 0200 	mov.w	r2, #0
 80038dc:	f04f 0300 	mov.w	r3, #0
 80038e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80038e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80038e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038ec:	4692      	mov	sl, r2
 80038ee:	469b      	mov	fp, r3
 80038f0:	4643      	mov	r3, r8
 80038f2:	eb1a 0303 	adds.w	r3, sl, r3
 80038f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80038fa:	464b      	mov	r3, r9
 80038fc:	eb4b 0303 	adc.w	r3, fp, r3
 8003900:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003910:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003914:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003918:	460b      	mov	r3, r1
 800391a:	18db      	adds	r3, r3, r3
 800391c:	643b      	str	r3, [r7, #64]	@ 0x40
 800391e:	4613      	mov	r3, r2
 8003920:	eb42 0303 	adc.w	r3, r2, r3
 8003924:	647b      	str	r3, [r7, #68]	@ 0x44
 8003926:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800392a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800392e:	f7fc fc69 	bl	8000204 <__aeabi_uldivmod>
 8003932:	4602      	mov	r2, r0
 8003934:	460b      	mov	r3, r1
 8003936:	4611      	mov	r1, r2
 8003938:	4b3b      	ldr	r3, [pc, #236]	@ (8003a28 <UART_SetConfig+0x2d4>)
 800393a:	fba3 2301 	umull	r2, r3, r3, r1
 800393e:	095b      	lsrs	r3, r3, #5
 8003940:	2264      	movs	r2, #100	@ 0x64
 8003942:	fb02 f303 	mul.w	r3, r2, r3
 8003946:	1acb      	subs	r3, r1, r3
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800394e:	4b36      	ldr	r3, [pc, #216]	@ (8003a28 <UART_SetConfig+0x2d4>)
 8003950:	fba3 2302 	umull	r2, r3, r3, r2
 8003954:	095b      	lsrs	r3, r3, #5
 8003956:	005b      	lsls	r3, r3, #1
 8003958:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800395c:	441c      	add	r4, r3
 800395e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003962:	2200      	movs	r2, #0
 8003964:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003968:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800396c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003970:	4642      	mov	r2, r8
 8003972:	464b      	mov	r3, r9
 8003974:	1891      	adds	r1, r2, r2
 8003976:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003978:	415b      	adcs	r3, r3
 800397a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800397c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003980:	4641      	mov	r1, r8
 8003982:	1851      	adds	r1, r2, r1
 8003984:	6339      	str	r1, [r7, #48]	@ 0x30
 8003986:	4649      	mov	r1, r9
 8003988:	414b      	adcs	r3, r1
 800398a:	637b      	str	r3, [r7, #52]	@ 0x34
 800398c:	f04f 0200 	mov.w	r2, #0
 8003990:	f04f 0300 	mov.w	r3, #0
 8003994:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003998:	4659      	mov	r1, fp
 800399a:	00cb      	lsls	r3, r1, #3
 800399c:	4651      	mov	r1, sl
 800399e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039a2:	4651      	mov	r1, sl
 80039a4:	00ca      	lsls	r2, r1, #3
 80039a6:	4610      	mov	r0, r2
 80039a8:	4619      	mov	r1, r3
 80039aa:	4603      	mov	r3, r0
 80039ac:	4642      	mov	r2, r8
 80039ae:	189b      	adds	r3, r3, r2
 80039b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80039b4:	464b      	mov	r3, r9
 80039b6:	460a      	mov	r2, r1
 80039b8:	eb42 0303 	adc.w	r3, r2, r3
 80039bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80039c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80039cc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80039d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80039d4:	460b      	mov	r3, r1
 80039d6:	18db      	adds	r3, r3, r3
 80039d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039da:	4613      	mov	r3, r2
 80039dc:	eb42 0303 	adc.w	r3, r2, r3
 80039e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80039e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80039ea:	f7fc fc0b 	bl	8000204 <__aeabi_uldivmod>
 80039ee:	4602      	mov	r2, r0
 80039f0:	460b      	mov	r3, r1
 80039f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003a28 <UART_SetConfig+0x2d4>)
 80039f4:	fba3 1302 	umull	r1, r3, r3, r2
 80039f8:	095b      	lsrs	r3, r3, #5
 80039fa:	2164      	movs	r1, #100	@ 0x64
 80039fc:	fb01 f303 	mul.w	r3, r1, r3
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	3332      	adds	r3, #50	@ 0x32
 8003a06:	4a08      	ldr	r2, [pc, #32]	@ (8003a28 <UART_SetConfig+0x2d4>)
 8003a08:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0c:	095b      	lsrs	r3, r3, #5
 8003a0e:	f003 0207 	and.w	r2, r3, #7
 8003a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4422      	add	r2, r4
 8003a1a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a1c:	e106      	b.n	8003c2c <UART_SetConfig+0x4d8>
 8003a1e:	bf00      	nop
 8003a20:	40011000 	.word	0x40011000
 8003a24:	40011400 	.word	0x40011400
 8003a28:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a30:	2200      	movs	r2, #0
 8003a32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003a36:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003a3a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003a3e:	4642      	mov	r2, r8
 8003a40:	464b      	mov	r3, r9
 8003a42:	1891      	adds	r1, r2, r2
 8003a44:	6239      	str	r1, [r7, #32]
 8003a46:	415b      	adcs	r3, r3
 8003a48:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a4e:	4641      	mov	r1, r8
 8003a50:	1854      	adds	r4, r2, r1
 8003a52:	4649      	mov	r1, r9
 8003a54:	eb43 0501 	adc.w	r5, r3, r1
 8003a58:	f04f 0200 	mov.w	r2, #0
 8003a5c:	f04f 0300 	mov.w	r3, #0
 8003a60:	00eb      	lsls	r3, r5, #3
 8003a62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a66:	00e2      	lsls	r2, r4, #3
 8003a68:	4614      	mov	r4, r2
 8003a6a:	461d      	mov	r5, r3
 8003a6c:	4643      	mov	r3, r8
 8003a6e:	18e3      	adds	r3, r4, r3
 8003a70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003a74:	464b      	mov	r3, r9
 8003a76:	eb45 0303 	adc.w	r3, r5, r3
 8003a7a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003a8a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003a8e:	f04f 0200 	mov.w	r2, #0
 8003a92:	f04f 0300 	mov.w	r3, #0
 8003a96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003a9a:	4629      	mov	r1, r5
 8003a9c:	008b      	lsls	r3, r1, #2
 8003a9e:	4621      	mov	r1, r4
 8003aa0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003aa4:	4621      	mov	r1, r4
 8003aa6:	008a      	lsls	r2, r1, #2
 8003aa8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003aac:	f7fc fbaa 	bl	8000204 <__aeabi_uldivmod>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	4b60      	ldr	r3, [pc, #384]	@ (8003c38 <UART_SetConfig+0x4e4>)
 8003ab6:	fba3 2302 	umull	r2, r3, r3, r2
 8003aba:	095b      	lsrs	r3, r3, #5
 8003abc:	011c      	lsls	r4, r3, #4
 8003abe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003ac8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003acc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003ad0:	4642      	mov	r2, r8
 8003ad2:	464b      	mov	r3, r9
 8003ad4:	1891      	adds	r1, r2, r2
 8003ad6:	61b9      	str	r1, [r7, #24]
 8003ad8:	415b      	adcs	r3, r3
 8003ada:	61fb      	str	r3, [r7, #28]
 8003adc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ae0:	4641      	mov	r1, r8
 8003ae2:	1851      	adds	r1, r2, r1
 8003ae4:	6139      	str	r1, [r7, #16]
 8003ae6:	4649      	mov	r1, r9
 8003ae8:	414b      	adcs	r3, r1
 8003aea:	617b      	str	r3, [r7, #20]
 8003aec:	f04f 0200 	mov.w	r2, #0
 8003af0:	f04f 0300 	mov.w	r3, #0
 8003af4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003af8:	4659      	mov	r1, fp
 8003afa:	00cb      	lsls	r3, r1, #3
 8003afc:	4651      	mov	r1, sl
 8003afe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b02:	4651      	mov	r1, sl
 8003b04:	00ca      	lsls	r2, r1, #3
 8003b06:	4610      	mov	r0, r2
 8003b08:	4619      	mov	r1, r3
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	4642      	mov	r2, r8
 8003b0e:	189b      	adds	r3, r3, r2
 8003b10:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b14:	464b      	mov	r3, r9
 8003b16:	460a      	mov	r2, r1
 8003b18:	eb42 0303 	adc.w	r3, r2, r3
 8003b1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b2a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003b2c:	f04f 0200 	mov.w	r2, #0
 8003b30:	f04f 0300 	mov.w	r3, #0
 8003b34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003b38:	4649      	mov	r1, r9
 8003b3a:	008b      	lsls	r3, r1, #2
 8003b3c:	4641      	mov	r1, r8
 8003b3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b42:	4641      	mov	r1, r8
 8003b44:	008a      	lsls	r2, r1, #2
 8003b46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003b4a:	f7fc fb5b 	bl	8000204 <__aeabi_uldivmod>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	460b      	mov	r3, r1
 8003b52:	4611      	mov	r1, r2
 8003b54:	4b38      	ldr	r3, [pc, #224]	@ (8003c38 <UART_SetConfig+0x4e4>)
 8003b56:	fba3 2301 	umull	r2, r3, r3, r1
 8003b5a:	095b      	lsrs	r3, r3, #5
 8003b5c:	2264      	movs	r2, #100	@ 0x64
 8003b5e:	fb02 f303 	mul.w	r3, r2, r3
 8003b62:	1acb      	subs	r3, r1, r3
 8003b64:	011b      	lsls	r3, r3, #4
 8003b66:	3332      	adds	r3, #50	@ 0x32
 8003b68:	4a33      	ldr	r2, [pc, #204]	@ (8003c38 <UART_SetConfig+0x4e4>)
 8003b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b6e:	095b      	lsrs	r3, r3, #5
 8003b70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b74:	441c      	add	r4, r3
 8003b76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	673b      	str	r3, [r7, #112]	@ 0x70
 8003b7e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003b80:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003b84:	4642      	mov	r2, r8
 8003b86:	464b      	mov	r3, r9
 8003b88:	1891      	adds	r1, r2, r2
 8003b8a:	60b9      	str	r1, [r7, #8]
 8003b8c:	415b      	adcs	r3, r3
 8003b8e:	60fb      	str	r3, [r7, #12]
 8003b90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b94:	4641      	mov	r1, r8
 8003b96:	1851      	adds	r1, r2, r1
 8003b98:	6039      	str	r1, [r7, #0]
 8003b9a:	4649      	mov	r1, r9
 8003b9c:	414b      	adcs	r3, r1
 8003b9e:	607b      	str	r3, [r7, #4]
 8003ba0:	f04f 0200 	mov.w	r2, #0
 8003ba4:	f04f 0300 	mov.w	r3, #0
 8003ba8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003bac:	4659      	mov	r1, fp
 8003bae:	00cb      	lsls	r3, r1, #3
 8003bb0:	4651      	mov	r1, sl
 8003bb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bb6:	4651      	mov	r1, sl
 8003bb8:	00ca      	lsls	r2, r1, #3
 8003bba:	4610      	mov	r0, r2
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	4642      	mov	r2, r8
 8003bc2:	189b      	adds	r3, r3, r2
 8003bc4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003bc6:	464b      	mov	r3, r9
 8003bc8:	460a      	mov	r2, r1
 8003bca:	eb42 0303 	adc.w	r3, r2, r3
 8003bce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	663b      	str	r3, [r7, #96]	@ 0x60
 8003bda:	667a      	str	r2, [r7, #100]	@ 0x64
 8003bdc:	f04f 0200 	mov.w	r2, #0
 8003be0:	f04f 0300 	mov.w	r3, #0
 8003be4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003be8:	4649      	mov	r1, r9
 8003bea:	008b      	lsls	r3, r1, #2
 8003bec:	4641      	mov	r1, r8
 8003bee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bf2:	4641      	mov	r1, r8
 8003bf4:	008a      	lsls	r2, r1, #2
 8003bf6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003bfa:	f7fc fb03 	bl	8000204 <__aeabi_uldivmod>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	460b      	mov	r3, r1
 8003c02:	4b0d      	ldr	r3, [pc, #52]	@ (8003c38 <UART_SetConfig+0x4e4>)
 8003c04:	fba3 1302 	umull	r1, r3, r3, r2
 8003c08:	095b      	lsrs	r3, r3, #5
 8003c0a:	2164      	movs	r1, #100	@ 0x64
 8003c0c:	fb01 f303 	mul.w	r3, r1, r3
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	011b      	lsls	r3, r3, #4
 8003c14:	3332      	adds	r3, #50	@ 0x32
 8003c16:	4a08      	ldr	r2, [pc, #32]	@ (8003c38 <UART_SetConfig+0x4e4>)
 8003c18:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1c:	095b      	lsrs	r3, r3, #5
 8003c1e:	f003 020f 	and.w	r2, r3, #15
 8003c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4422      	add	r2, r4
 8003c2a:	609a      	str	r2, [r3, #8]
}
 8003c2c:	bf00      	nop
 8003c2e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003c32:	46bd      	mov	sp, r7
 8003c34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c38:	51eb851f 	.word	0x51eb851f

08003c3c <atoi>:
 8003c3c:	220a      	movs	r2, #10
 8003c3e:	2100      	movs	r1, #0
 8003c40:	f000 b87a 	b.w	8003d38 <strtol>

08003c44 <_strtol_l.isra.0>:
 8003c44:	2b24      	cmp	r3, #36	@ 0x24
 8003c46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c4a:	4686      	mov	lr, r0
 8003c4c:	4690      	mov	r8, r2
 8003c4e:	d801      	bhi.n	8003c54 <_strtol_l.isra.0+0x10>
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d106      	bne.n	8003c62 <_strtol_l.isra.0+0x1e>
 8003c54:	f000 f882 	bl	8003d5c <__errno>
 8003c58:	2316      	movs	r3, #22
 8003c5a:	6003      	str	r3, [r0, #0]
 8003c5c:	2000      	movs	r0, #0
 8003c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c62:	4834      	ldr	r0, [pc, #208]	@ (8003d34 <_strtol_l.isra.0+0xf0>)
 8003c64:	460d      	mov	r5, r1
 8003c66:	462a      	mov	r2, r5
 8003c68:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003c6c:	5d06      	ldrb	r6, [r0, r4]
 8003c6e:	f016 0608 	ands.w	r6, r6, #8
 8003c72:	d1f8      	bne.n	8003c66 <_strtol_l.isra.0+0x22>
 8003c74:	2c2d      	cmp	r4, #45	@ 0x2d
 8003c76:	d110      	bne.n	8003c9a <_strtol_l.isra.0+0x56>
 8003c78:	782c      	ldrb	r4, [r5, #0]
 8003c7a:	2601      	movs	r6, #1
 8003c7c:	1c95      	adds	r5, r2, #2
 8003c7e:	f033 0210 	bics.w	r2, r3, #16
 8003c82:	d115      	bne.n	8003cb0 <_strtol_l.isra.0+0x6c>
 8003c84:	2c30      	cmp	r4, #48	@ 0x30
 8003c86:	d10d      	bne.n	8003ca4 <_strtol_l.isra.0+0x60>
 8003c88:	782a      	ldrb	r2, [r5, #0]
 8003c8a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8003c8e:	2a58      	cmp	r2, #88	@ 0x58
 8003c90:	d108      	bne.n	8003ca4 <_strtol_l.isra.0+0x60>
 8003c92:	786c      	ldrb	r4, [r5, #1]
 8003c94:	3502      	adds	r5, #2
 8003c96:	2310      	movs	r3, #16
 8003c98:	e00a      	b.n	8003cb0 <_strtol_l.isra.0+0x6c>
 8003c9a:	2c2b      	cmp	r4, #43	@ 0x2b
 8003c9c:	bf04      	itt	eq
 8003c9e:	782c      	ldrbeq	r4, [r5, #0]
 8003ca0:	1c95      	addeq	r5, r2, #2
 8003ca2:	e7ec      	b.n	8003c7e <_strtol_l.isra.0+0x3a>
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d1f6      	bne.n	8003c96 <_strtol_l.isra.0+0x52>
 8003ca8:	2c30      	cmp	r4, #48	@ 0x30
 8003caa:	bf14      	ite	ne
 8003cac:	230a      	movne	r3, #10
 8003cae:	2308      	moveq	r3, #8
 8003cb0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8003cb4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003cb8:	2200      	movs	r2, #0
 8003cba:	fbbc f9f3 	udiv	r9, ip, r3
 8003cbe:	4610      	mov	r0, r2
 8003cc0:	fb03 ca19 	mls	sl, r3, r9, ip
 8003cc4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8003cc8:	2f09      	cmp	r7, #9
 8003cca:	d80f      	bhi.n	8003cec <_strtol_l.isra.0+0xa8>
 8003ccc:	463c      	mov	r4, r7
 8003cce:	42a3      	cmp	r3, r4
 8003cd0:	dd1b      	ble.n	8003d0a <_strtol_l.isra.0+0xc6>
 8003cd2:	1c57      	adds	r7, r2, #1
 8003cd4:	d007      	beq.n	8003ce6 <_strtol_l.isra.0+0xa2>
 8003cd6:	4581      	cmp	r9, r0
 8003cd8:	d314      	bcc.n	8003d04 <_strtol_l.isra.0+0xc0>
 8003cda:	d101      	bne.n	8003ce0 <_strtol_l.isra.0+0x9c>
 8003cdc:	45a2      	cmp	sl, r4
 8003cde:	db11      	blt.n	8003d04 <_strtol_l.isra.0+0xc0>
 8003ce0:	fb00 4003 	mla	r0, r0, r3, r4
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003cea:	e7eb      	b.n	8003cc4 <_strtol_l.isra.0+0x80>
 8003cec:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8003cf0:	2f19      	cmp	r7, #25
 8003cf2:	d801      	bhi.n	8003cf8 <_strtol_l.isra.0+0xb4>
 8003cf4:	3c37      	subs	r4, #55	@ 0x37
 8003cf6:	e7ea      	b.n	8003cce <_strtol_l.isra.0+0x8a>
 8003cf8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8003cfc:	2f19      	cmp	r7, #25
 8003cfe:	d804      	bhi.n	8003d0a <_strtol_l.isra.0+0xc6>
 8003d00:	3c57      	subs	r4, #87	@ 0x57
 8003d02:	e7e4      	b.n	8003cce <_strtol_l.isra.0+0x8a>
 8003d04:	f04f 32ff 	mov.w	r2, #4294967295
 8003d08:	e7ed      	b.n	8003ce6 <_strtol_l.isra.0+0xa2>
 8003d0a:	1c53      	adds	r3, r2, #1
 8003d0c:	d108      	bne.n	8003d20 <_strtol_l.isra.0+0xdc>
 8003d0e:	2322      	movs	r3, #34	@ 0x22
 8003d10:	f8ce 3000 	str.w	r3, [lr]
 8003d14:	4660      	mov	r0, ip
 8003d16:	f1b8 0f00 	cmp.w	r8, #0
 8003d1a:	d0a0      	beq.n	8003c5e <_strtol_l.isra.0+0x1a>
 8003d1c:	1e69      	subs	r1, r5, #1
 8003d1e:	e006      	b.n	8003d2e <_strtol_l.isra.0+0xea>
 8003d20:	b106      	cbz	r6, 8003d24 <_strtol_l.isra.0+0xe0>
 8003d22:	4240      	negs	r0, r0
 8003d24:	f1b8 0f00 	cmp.w	r8, #0
 8003d28:	d099      	beq.n	8003c5e <_strtol_l.isra.0+0x1a>
 8003d2a:	2a00      	cmp	r2, #0
 8003d2c:	d1f6      	bne.n	8003d1c <_strtol_l.isra.0+0xd8>
 8003d2e:	f8c8 1000 	str.w	r1, [r8]
 8003d32:	e794      	b.n	8003c5e <_strtol_l.isra.0+0x1a>
 8003d34:	08003de1 	.word	0x08003de1

08003d38 <strtol>:
 8003d38:	4613      	mov	r3, r2
 8003d3a:	460a      	mov	r2, r1
 8003d3c:	4601      	mov	r1, r0
 8003d3e:	4802      	ldr	r0, [pc, #8]	@ (8003d48 <strtol+0x10>)
 8003d40:	6800      	ldr	r0, [r0, #0]
 8003d42:	f7ff bf7f 	b.w	8003c44 <_strtol_l.isra.0>
 8003d46:	bf00      	nop
 8003d48:	2000000c 	.word	0x2000000c

08003d4c <memset>:
 8003d4c:	4402      	add	r2, r0
 8003d4e:	4603      	mov	r3, r0
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d100      	bne.n	8003d56 <memset+0xa>
 8003d54:	4770      	bx	lr
 8003d56:	f803 1b01 	strb.w	r1, [r3], #1
 8003d5a:	e7f9      	b.n	8003d50 <memset+0x4>

08003d5c <__errno>:
 8003d5c:	4b01      	ldr	r3, [pc, #4]	@ (8003d64 <__errno+0x8>)
 8003d5e:	6818      	ldr	r0, [r3, #0]
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	2000000c 	.word	0x2000000c

08003d68 <__libc_init_array>:
 8003d68:	b570      	push	{r4, r5, r6, lr}
 8003d6a:	4d0d      	ldr	r5, [pc, #52]	@ (8003da0 <__libc_init_array+0x38>)
 8003d6c:	4c0d      	ldr	r4, [pc, #52]	@ (8003da4 <__libc_init_array+0x3c>)
 8003d6e:	1b64      	subs	r4, r4, r5
 8003d70:	10a4      	asrs	r4, r4, #2
 8003d72:	2600      	movs	r6, #0
 8003d74:	42a6      	cmp	r6, r4
 8003d76:	d109      	bne.n	8003d8c <__libc_init_array+0x24>
 8003d78:	4d0b      	ldr	r5, [pc, #44]	@ (8003da8 <__libc_init_array+0x40>)
 8003d7a:	4c0c      	ldr	r4, [pc, #48]	@ (8003dac <__libc_init_array+0x44>)
 8003d7c:	f000 f818 	bl	8003db0 <_init>
 8003d80:	1b64      	subs	r4, r4, r5
 8003d82:	10a4      	asrs	r4, r4, #2
 8003d84:	2600      	movs	r6, #0
 8003d86:	42a6      	cmp	r6, r4
 8003d88:	d105      	bne.n	8003d96 <__libc_init_array+0x2e>
 8003d8a:	bd70      	pop	{r4, r5, r6, pc}
 8003d8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d90:	4798      	blx	r3
 8003d92:	3601      	adds	r6, #1
 8003d94:	e7ee      	b.n	8003d74 <__libc_init_array+0xc>
 8003d96:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d9a:	4798      	blx	r3
 8003d9c:	3601      	adds	r6, #1
 8003d9e:	e7f2      	b.n	8003d86 <__libc_init_array+0x1e>
 8003da0:	08003eec 	.word	0x08003eec
 8003da4:	08003eec 	.word	0x08003eec
 8003da8:	08003eec 	.word	0x08003eec
 8003dac:	08003ef0 	.word	0x08003ef0

08003db0 <_init>:
 8003db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003db2:	bf00      	nop
 8003db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003db6:	bc08      	pop	{r3}
 8003db8:	469e      	mov	lr, r3
 8003dba:	4770      	bx	lr

08003dbc <_fini>:
 8003dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dbe:	bf00      	nop
 8003dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dc2:	bc08      	pop	{r3}
 8003dc4:	469e      	mov	lr, r3
 8003dc6:	4770      	bx	lr
